// Tudo relacionado as acoes que os jogadores podem realizar.
import "ent/comum.proto";

package ent;
option java_package = "com.matferib.Tabuleiro.ent";

enum TipoAcao {
  ACAO_INVALIDA = 0;
  ACAO_PROJETIL = 1;
  ACAO_DISPERSAO = 2;
  ACAO_RAIO = 3;
  ACAO_SINALIZACAO = 4;
  ACAO_DELTA_PONTOS_VIDA = 5;
  ACAO_CORPO_A_CORPO = 6;
  ACAO_FEITICO_TOQUE = 7;
  ACAO_AGARRAR = 8;
  ACAO_POCAO = 9;
  ACAO_PROJETIL_AREA = 10;
}

// Algumas acoes causam consequencias, como deslocamento do alvo.
enum TipoConsequencia {
  TC_NENHUMA           = 0;
  TC_DESLOCA_ALVO      = 1;
  TC_INFLAMA_ALVO      = 2;
  TC_AGARRA_ALVO       = 3;
}

enum GeometriaAcao {
  ACAO_GEO_ESFERA = 1;
  ACAO_GEO_CUBO = 2;
  ACAO_GEO_CONE = 3;
  ACAO_GEO_CILINDRO = 4;
}

enum TipoAceleracao {
  ACAO_ACEL_ZERO = 1;  // Nao muda velocidade.
  ACAO_ACEL_CONSTANTE = 2;  // Aceleracao nao varia, velocidade varia linerarmente.
  ACAO_ACEL_LINEAR = 3;  // Aceleracao varia, velocidade quadratica.
}

message Translacao {
  optional float x = 1 [default=0];
  optional float y = 2 [default=0];
  optional float z = 3 [default=0];
}

message Velocidade {
  // Em m/s.
  optional float inicial_m_s = 1;
  optional TipoAceleracao tipo_aceleracao = 2 [default=ACAO_ACEL_ZERO];
  optional float aceleracao_m_s_2 = 3;
  optional float delta_aceleracao_m_s_3 = 4 [default=0];
  optional float maxima_m_s = 5 [default=50.0];
}

message AcaoProto {
  // Identificador da acao, para menus.
  optional string id = 1;
  // Tipo da acao.
  optional TipoAcao tipo = 2;
  // Raio da acao (para dispersao).
  optional float raio_quadrados = 3;  // quadrados.
  // Distancia da acao (para dispersao de cone e raio).
  optional float distancia_quadrados = 5;  // quadrados.
  // Aplicada antes da escala.
  optional Translacao translacao = 17;
  // Escala sobre a geometria.
  optional Escala escala = 18;
  // Cor da acao.
  optional Cor cor = 4;
  // Identificador do causador da acao.
  optional uint32 id_entidade_origem = 10;
  // Identificador do alvo da acao.
  repeated uint32 id_entidade_destino = 11;
  // Posicao do clique no tabuleiro, para quem usar.
  optional Posicao pos_tabuleiro = 13;
  // Posicao do clique na entidade, se houver.
  optional Posicao pos_entidade = 12;
  // Usado para indicar o delta de pontos de vida da unidade afetada. Ver afeta_pontos_vida.
  optional int32 delta_pontos_vida = 14;  // quanto de vida. Se afeta_pontos_vida, afetara de verdade.
  optional string texto = 24;  // tambem cosmetico, usado para regua.
  // O tabuleiro ira alterar os pontos de vida da entidade afetada ao termino da acao.
  optional bool afeta_pontos_vida = 15;  // Se verdadeiro, a entidade sofre o dano de verdade.
  optional bool gera_outras_acoes = 43;  // Se verdadeiro, gerara outras acoes, como de texto ao termino.
  // O tipo de objeto para algumas acoes especificas.
  optional GeometriaAcao geometria = 16;
  optional Velocidade velocidade = 19;
  // Duracao em s.
  optional float duracao_s = 20;
  // Atraso para comecar a acao em s.
  optional float atraso_s = 21;
  // Acao tem efeito de area. Isso implica que os alvos serao calculados dinamicamente.
  optional bool efeito_area = 22;
  // Acao tem dano direto e de area.
  optional bool efeito_projetil_area = 42;
  optional bool permite_salvacao = 23;
  optional ResultadoSalvacao resultado_salvacao = 32;
  // A base eh usada para calcular o valor final, adicionando modificadores de atributos.
  optional int32 dificuldade_salvacao_base = 49;
  // Caso presente, usara 10 + o nivel do feitico como base.
  optional bool dificuldade_salvacao_por_nivel = 50;
  optional int32 dificuldade_salvacao = 33;
  optional TipoSalvacao tipo_salvacao = 34;
  // Se verdadeiro, o ataque permite que ataque vs defesa seja feito automaticamente. Caso contrario,
  // ira considerar sempre um acerto e pular esta etapa.
  optional bool permite_ataque_vs_defesa = 27;
  // Para agarrar, ignora o ataque de toque.
  optional bool ignora_ataque_toque = 41;
  // A textura que representa a acao (icone).
  optional string icone = 25;
  // A acao deve ser feita apenas localmente.
  optional bool local_apenas = 26;
  // Acoes com textura.
  optional InfoTextura info_textura = 28;
  // Se verdadeiro, desliga a luz para desenha a acao.
  optional bool ignora_luz = 29;
  // Se verdadeiro, desliga face nula (culling).
  optional bool dois_lados = 30;
  // Consequencia da acao.
  optional TipoConsequencia consequencia = 31 [default=TC_NENHUMA];
  // Para acoes que afetam multiplos alvos.
  message DeltaPontosVidaPorEntidade {
    optional uint32 id = 1;
    optional int32 delta = 2;
    optional bool omite_texto = 3 [deprecated=true];
    optional string texto = 4;
  }
  repeated DeltaPontosVidaPorEntidade delta_por_entidade = 35;
  // Indica ataque de toque.
  optional bool ataque_toque = 36;
  // Indica ataque a distancia.
  optional bool ataque_distancia = 37;
  // O ataque eh de agarrar.
  optional bool ataque_agarrar = 38;
  // Indica que a acao foi bem sucedida.
  optional bool bem_sucedida = 39;
  // Indica dano nao letal.
  optional bool nao_letal = 40;
  // Algumas acoes afetam apenas alguns tipos de entidades.
  optional TipoDnD afeta_apenas = 44;
  // Para acoes de projetil que ignoram municao, tipo missil magico.
  optional bool ignora_municao = 45;
  // Diversos tipos de acao ignoram a reducao de dano do barbaro, que se aplica apenas a ataques de armas
  // e ataques naturais.
  optional bool ignora_reducao_dano_barbaro = 46;
  // Para acoes que vem de conjuracao, indicar a classe: mago, clerigo etc.
  optional string classe_conjuracao = 47;
  // True se a acao ignorar resistencia a magia.
  optional bool ignora_resistencia_magia = 48;
  // Ataque elemental.
  optional DescritorAtaque elemento = 51;
  // Descritores do ataque.
  repeated DescritorAtaque descritores_ataque = 52;
}

// O arquivo de acoes Ã© serializado desta forma.
message Acoes {
  repeated AcaoProto acao = 1;
}
