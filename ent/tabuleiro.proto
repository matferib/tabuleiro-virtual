syntax = "proto2";
import "ent/entidade.proto";
import "ent/comum.proto";

package ent;
option java_package = "com.matferib.Tabuleiro.ent";

message IluminacaoDirecional {
  // Cor da luz ambiente.
  optional Cor cor = 1;
  // Angulos em graus.
  // Direcao da luz ambiente. 0 significa nascente, 90 significa luz a pino, 180 poente, 270 subsolo.
  optional float inclinacao_graus = 2 [default=90.0];
  // Posicao do eixo do sol (0 = norte, 90 = leste, 180 = sul, 270 = oeste).
  optional float posicao_graus = 3 [default=0.0];
}

// O sistema de visualizacao funciona com dois pontos:
// - Origem: de onde o olho olha.
// - Alvo: para onde o olho olha.
// Aqui a gente usa um sistema circular ao redor do alvo, a uma distancia horizontal de raio,
// de uma determinada altura e rotacao.
// A posicao do destino eh para onde o olho se desloca conforme selecao de entidades ou quadrados.
message Olho {
  optional Posicao alvo = 1;  // Para onde o olho olha.
  optional Posicao destino = 2;  // Para movimentos de olho.
  optional float rotacao_rad = 3;  // radianos.
  optional float altura = 4;  // Distancia vertical do olho ao alvo.
  optional float raio = 5;  // Distancia horizontal do olho ao alvo.
  optional Posicao pos = 6;  // Posicao do olho, computada dos valores acima.
}

// Opcoes pessoais.
message OpcoesProto {
  optional bool mostra_fps = 1 [default=false];
  optional bool texturas_sempre_de_frente = 2 [default=true];
  optional bool iluminacao_mestre_igual_jogadores = 3 [default=true];
  optional bool desenha_rosa_dos_ventos = 4 [default=true];
  optional bool anti_aliasing = 5 [default=false];
  optional bool desenha_grade = 6 [default=true];
  optional bool desenha_controle_virtual = 7 [default=true];
  optional bool mostra_lista_objetos = 8 [default=false];
  optional bool desenha_olho = 9 [default=false];
  optional bool mostra_lista_jogadores = 10 [default=false];

  // Estas opcoes nao podem ser alteradas durante o jogo. ie deve-se reiniciar.
  optional bool mapeamento_sombras = 11 [default=true];
  optional bool iluminacao_por_pixel = 12 [default=false, deprecated=true];
  enum TipoIluminacao {
    TI_VERTICE = 0;
    TI_PIXEL = 1;
    TI_ESPECULAR = 2;
  }
  optional TipoIluminacao tipo_iluminacao = 20 [default=TI_VERTICE];
  optional bool mapeamento_oclusao = 13 [default=true];
  optional bool mapeamento_luzes = 18 [default=true];

  optional bool mostra_iniciativas = 14 [default=true];
  optional string ultimo_endereco = 15;
  optional string ultimo_endereco_proxy = 19;
  optional bool mostra_log_eventos = 16;
  optional bool ataque_vs_defesa_posicao_real = 17;
  // Se verdadeiro, ao apertar tab, o ataque será ativado automaticamente.
  optional bool tab_ativa_ataque = 21;
  // Se verdadeiro, som sera desativado.
  optional bool desativar_som = 22;
}

// Mensagem enviada para os clientes de um jogo.
// Proximo id: 31.
message TabuleiroProto {
  // Identificador do cenario. Um tabuleiro pode ser composto por varios cenarios. O principal sera sempre o -1.
  optional int32 id_cenario = 17 [default = -1];
  // Uma breve descricao do cenario.
  optional string descricao_cenario = 19;
  // Quando o tabuleiro eh salvo, ele ganha um nome para a operacao de salvar.
  optional string nome = 12;
  // Identificador do cliente.
  optional int32 id_cliente = 1;
  // Iluminacao do tabuleiro.
  optional IluminacaoDirecional luz_direcional = 3;
  optional Cor luz_ambiente = 7;
  // Textura do tabuleiro. Se herdado, usara do pai.
  optional InfoTextura info_textura_piso = 5;
  // Se presente, aplicara cor de piso. Se herdado, usara do pai.
  optional Cor cor_piso = 23;
  // Caixa do ceu (skybox). Se herdado, usara do pai.
  optional InfoTextura info_textura_ceu = 16;
  // Para texturas noturnas e escuras, eh melhor nao aplicar iluminacao. Se herdado, usara do pai.
  optional bool aplicar_luz_ambiente_textura_ceu = 20 [default = true];
  // Aplicar a textura de forma ladrilhada. Se herdado, usara do pai.
  optional bool ladrilho = 9;
  // Tamanho do tabuleiro em quadrados.
  optional uint32 largura = 4 [default=20];
  optional uint32 altura = 6 [default=20];
  // Os pontos de relevo do terreno. Preenche-se do sul para o norte, oeste para leste. O primeiro
  // ponto eh SW, o segundo eh SW + 1E e por ai vai.
  repeated double ponto_terreno = 21;
  // Se verdadeiro, nao usa entidades do proto e mantem as correntes. Usado para deserializacao.
  optional bool manter_entidades = 8 [default=false];
  // Entidades do tabuleiro.
  repeated EntidadeProto entidade = 2;
  // Nevoa do tabuleiro, se houver.
  optional Nevoa nevoa = 10;
  // Alguns tabuleiros ja vem com grade desenhada.
  optional bool desenha_grade = 11 [default=true];
  // Se verdadeiro, apenas o mestre vera a textura do tabuleiro.
  optional bool textura_mestre_apenas = 13 [default=false];
  // Quando jogador entra no jogo, a camera aponta inicialmente para ca.
  optional Olho camera_inicial = 14;
  // Contador simples de rodadas.
  optional int32 contador_rodadas = 15;
  // Sub cenarios do tabuleiro. Deve ser populado apenas para o tabuleiro pai.
  // Os sub cenarios nao possuem entidades. Cada entidade possui informacao sobre
  // qual tabuleiro ela esta localizada.
  repeated TabuleiroProto sub_cenario = 18;
  // Para atualizacao de iniciativa.
  optional int32 indice_iniciativa = 22;
  optional bool iniciativa_valida = 30;

  repeated TabuleiroProto deprecated_versoes = 24;
  message Versao {
    // Proto serializado, performance.
    optional bytes dados = 1;
    // Descricao da versao.
    optional string descricao = 2;
  }
  // Cada vez que salva, uma versao do tabuleiro é salva para poder ser restaurada. Por motivos de eficiencia, manter como byte string.
  repeated Versao versoes = 25;

  // Caso estas variaveis esteja preenchidas, usara a textura de ceu e piso de
  // outro tabuleiro.
  optional int32 herdar_piso_de = 26;
  optional int32 herdar_ceu_de = 27;
  optional int32 herdar_iluminacao_de = 28;
  optional int32 herdar_nevoa_de = 29;
}

// Para copiar e colar.
message EntidadesCopiadas {
  optional TabuleiroProto origem = 2;
  repeated EntidadeProto entidade = 1;
}
