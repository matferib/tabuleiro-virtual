import "ent/entidade.proto";

package ent;

message IluminacaoDirecional {
  // Cor da luz ambiente.
  optional Cor cor = 1;
  // Angulos em graus.
  // Direcao da luz ambiente. 0 significa nascente, 90 significa luz a pino, 180 poente, 270 subsolo.
  optional float inclinacao_graus = 2 [default=90.0];
  // Posicao do eixo do sol (0 = norte, 90 = leste, 180 = sul, 270 = oeste).
  optional float posicao_graus = 3 [default=0.0];
}

// A cor da nevoa vem da luz ambiente.
message Nevoa {
  optional float distancia_minima = 1;
  optional float distancia_maxima = 2;
}

// O sistema de visualizacao funciona com dois pontos:
// - Origem: de onde o olho olha.
// - Alvo: para onde o olho olha.
// Aqui a gente usa um sistema circular ao redor do alvo, a uma distancia horizontal de raio,
// de uma determinada altura e rotacao.
// A posicao do destino eh para onde o olho se desloca conforme selecao de entidades ou quadrados.
message Olho {
  optional Posicao alvo = 1;  // Para onde o olho olha.
  optional Posicao destino = 2;  // Para movimentos de olho.
  optional float rotacao_rad = 3;  // radianos.
  optional float altura = 4;  // Distancia vertical do olho ao alvo.
  optional float raio = 5;  // Distancia horizontal do olho ao alvo.
  optional Posicao pos = 6;  // Posicao do olho, computada dos valores acima.
}

// Opcoes pessoais.
message OpcoesProto {
  optional bool mostra_fps = 1 [default=false];
  optional bool texturas_sempre_de_frente = 2 [default=true];
  optional bool iluminacao_mestre_igual_jogadores = 3 [default=true];
  optional bool desenha_rosa_dos_ventos = 4 [default=true];
  optional bool anti_aliasing = 5 [default=false];
  optional bool desenha_grade = 6 [default=true];
  optional bool desenha_controle_virtual = 7 [default=false];
}

// Mensagem enviada para os clientes de um jogo.
message TabuleiroProto {
  // Quando o tabuleiro eh salvo, ele ganha um nome para a operacao de salvar.
  optional string nome = 12;
  // Identificador do cliente.
  optional int32 id_cliente = 1;
  // Iluminacao do tabuleiro.
  optional IluminacaoDirecional luz_direcional = 3;
  optional Cor luz_ambiente = 7;
  // Textura do tabuleiro.
  optional InfoTextura info_textura = 5;
  // Aplicar a textura de forma ladrilhada.
  optional bool ladrilho = 9;
  // Tamanho do tabuleiro em quadrados.
  optional uint32 largura = 4 [default=20];
  optional uint32 altura = 6 [default=20];
  // Se verdadeiro, nao usa entidades do proto e mantem as correntes.
  optional bool manter_entidades = 8 [default=false];
  // Entidades do tabuleiro.
  repeated EntidadeProto entidade = 2;
  // Nevoa do tabuleiro, se houver.
  optional Nevoa nevoa = 10;
  // Alguns tabuleiros ja vem com grade desenhada.
  optional bool desenha_grade = 11 [default=true];
  // Se verdadeiro, apenas o mestre vera a textura do tabuleiro.
  optional bool textura_mestre_apenas = 13 [default=false];
  // Quando jogador entra no jogo, a camera aponta inicialmente para ca.
  optional Posicao camera_inicial = 14;
}

// Cada modelo de entidade que pode ser adicionada. Apenas alguns campos da entidade sao considerados:
// - pontos de vida.
// - tamanho.
// - cor.
message Modelo {
  optional string id = 1;
  optional EntidadeProto entidade = 2;
}

// O arquivo eh serializado como uma repeticao de modelos em formato texto.
message Modelos {
  repeated Modelo modelo = 1;
}
