package ent;
option java_package = "com.matferib.Tabuleiro.ent";

enum TipoEntidade {
  TE_ENTIDADE = 0;
  TE_FORMA = 1;
  TE_COMPOSTA = 10;
}

// A ordem dos valores da enum deste proto eh importante, porque eh usada para construir o menu de desenho.
enum TipoForma {
  TF_CILINDRO = 0;
  TF_CIRCULO = 1;
  TF_CONE = 2;
  TF_CUBO = 3;
  TF_ESFERA = 4;
  TF_LIVRE = 5;
  TF_PIRAMIDE = 6;
  TF_RETANGULO = 7;
  TF_TRIANGULO = 8;
}

enum TamanhoEntidade {
  TM_MINUSCULO = 0;
  TM_DIMINUTO = 1;
  TM_MIUDO = 2;
  TM_PEQUENO = 3;
  TM_MEDIO = 4;
  TM_GRANDE = 5;
  TM_ENORME = 6;
  TM_IMENSO = 7;
  TM_COLOSSAL = 8;
}

enum ResultadoSalvacao {
  RS_FALHOU = 0;
  RS_MEIO = 1;
  RS_QUARTO = 2;
  RS_ANULOU = 3;
}

enum TipoVisao {
  VISAO_NORMAL = 0;
  VISAO_BAIXA_LUMINOSIDADE = 1;
  VISAO_ESCURO = 2;
}

// Tambem usado como vetor.
message Posicao {
  optional float x = 3;
  optional float y = 4;
  optional float z = 5;
  optional int32 id_cenario = 6 [default=-1];
}

message Cor {
  optional float r = 1 [default=0.0];
  optional float g = 2 [default=0.0];
  optional float b = 3 [default=0.0];
  optional float a = 4 [default=1.0];
}

message IluminacaoPontual {
  optional Cor cor = 1;
  optional float raio = 2;
  optional float atenuacao = 3 [deprecated=true];
}

message Nevoa {
  optional float minimo = 1;
  optional float maximo = 2;
  optional Posicao referencia = 3;  // coordenadas da camera.
  optional Cor cor = 4;
}

message InfoTextura {
  // Identificador da textura. Normalmente o nome do arquivo. Para mapeamento de cubo, sera adicionado
  // pos{xyz} e neg{xyz} apos o nome.
  optional string id = 1;
  // Para texturas de mapeamento de cubo.
  optional bool textura_cubo = 2;
  // Os bits da texturas lidos de forma crua do arquivo, ainda nao processado. Util para enviar texturas ou armazenar texturas locais
  // dentro de tabuleiros.
  optional bytes bits_crus = 6;
  optional bytes bits_crus_posx = 7;
  optional bytes bits_crus_posy = 8;
  optional bytes bits_crus_posz = 9;
  optional bytes bits_crus_negx = 10;
  optional bytes bits_crus_negy = 11;
  optional bytes bits_crus_negz = 12;
}

message Modelo3d {
  // Identificador do modelo 3d.
  optional string id = 1;
}

// A escala nos tres eixos.
message Escala {
  optional float x = 1 [default=1.0];
  optional float y = 2 [default=1.0];
  optional float z = 3 [default=1.0];
}

message EntidadeProto {
  // Tipo da entidade, determinada pela classe folha. Nao deve ser alterado.
  optional TipoEntidade tipo = 1;
  optional TipoForma sub_tipo = 18;
  // Identificador global da entidade composto pelo id_criador << 28 | id_local.
  // Portanto, o maximo de jogadores é 16. É importante que o identificador da entidade caiba em
  // um GLuint para permitir realização da operação de picking no 3d.
  optional uint32 id = 2;
  // Pontos de vida da entidade.
  optional int32 pontos_vida = 11;
  // Maximo de pontos de vida da entidade.
  optional int32 max_pontos_vida = 12;
  // Exemplo: 4d8 + 8.
  optional string dados_vida = 19;
  // Para os jogadores poderem se identificar.
  optional string rotulo = 20;
  // Informacoes adicionais sobre a entidade. Visivel apenas para o mestre ou se a entidade puder ser selecionada.
  // Algumas informacoes serao concatenadas ao valor do campo.
  repeated string rotulo_especial = 30;
  // Os varios tamanhos de uma entidade no tabuleiro.
  optional TamanhoEntidade tamanho = 3 [default=TM_MEDIO];
  // Se verdadeiro, objeto sera desenhado de forma achatada.
  optional bool achatado = 17 [default=false];
  // Posicao atual da entidade. Note que o Z eh quanto a criatura esta acima da translacao. A real posicao dela
  // esta em pos.z + translacao.z.
  optional Posicao pos = 4;
  // Para formas (exceto translacao).
  repeated Posicao ponto = 21;
  optional Escala escala = 22;
  optional float rotacao_z_graus = 23;  // rotacao do objeto ao redor de Z em graus.
  optional float rotacao_y_graus = 29;  // rotacao do objeto ao redor de Y em graus.
  optional float rotacao_x_graus = 33;  // rotacao do objeto ao redor de X em graus.
  optional float translacao_z_deprecated = 24 [deprecated=true];
  repeated EntidadeProto sub_forma = 25;  // Para entidades compostas.
  // Algumas formas permitem a transicao de um cenario para outro. Quando presente, esta forma tera a capacidade de transitar
  // entidades e a camera para outro cenario. Valor de -1 eh usado para cenario principal e -2 eh reservado para limpar a transicao.
  optional Posicao transicao_cenario = 35;

  // Destino da entidade.
  optional Posicao destino = 5;
  // Cor da entidade.
  optional Cor cor = 6;
  // Iluminação da entidade.
  optional IluminacaoPontual luz = 7;
  // Textura.
  optional InfoTextura info_textura = 8;
  // Modelo 3d.
  optional Modelo3d modelo_3d = 34;

  // BITS DAS ENTIDADE.
  optional int32 aura = 9 [deprecated=true];
  optional float aura_m = 41;
  // Visibilidade. Apenas o dono pode ver.
  optional bool visivel = 10 [default=true];
  // Verdadeiro se a entidade for voadora.
  optional bool voadora = 13 [default=false];
  // Entidade esta caida.
  optional bool caida = 14 [default=false];
  // Entidade esta morta.
  optional bool morta = 15 [default=false];
  // Se false, apenas o mestre pode ver propriedades da entidade, seleciona-la e fazer picking.
  optional bool selecionavel_para_jogador = 16 [default=true];
  // Se verdadeiro, o mestre nao conseguira selecionar a entidade. Ela sera apenas editavel com duplo clique.
  optional bool fixa = 32 [default=false];
  // Tipo de visao da entidade.
  optional TipoVisao tipo_visao = 36;
  // Alcance da visao no escuro em metros.
  optional float alcance_visao = 37;

  // Ultima acao para display. O valor eh um id no mapa de acoes do tabuleiro.
  optional string ultima_acao = 26;
  // Ultimas acoes executadas da unidade. Funciona como uma fila onde o indice 0 eh a acao mais recente e o
  // tamanho maximo eh dado pela constante MaxNumAcoes.
  repeated string lista_acoes = 38;
  // Resultado da proxima salvacao da entidade.
  optional ResultadoSalvacao proxima_salvacao = 27;
  // A direcao do ultimo impacto sofrido pela entidade.
  optional Posicao direcao_queda = 28;
  // Evento de entidade. A cada rodada, o contador de rodadas diminuira ate zero.
  // Ao termino do contador, o tabuleiro sinalizara a entidade.
  message Evento {
    optional int32 rodadas = 1;
    optional string descricao = 2;
    optional int32 id_efeito = 4;    // Se o evento for reconhecido como algum efeito, o id estara aqui. Ids validos em nt/util.h.
    optional int32 complemento = 3;  // Alguns efeitos tem complementos.
  }
  repeated Evento evento = 31;

  // Dados para ataque automatico.
  message DadosAtaque {
    optional string tipo_ataque = 1;
    optional int32 bonus_ataque = 2;
    optional string dano = 3;
  }
  repeated DadosAtaque dados_ataque = 44;
  // Dados para defesa de ataque automatico.
  message DadosDefesa {
    optional string tipo_defesa = 1;
    optional int32 classe_armadura = 2;
  }
  repeated DadosDefesa dados_defesa = 45;
  // Geracao de tesouro automatica?
  message DadosTesouro {
    optional string tesouro = 1;
  }
  repeated DadosTesouro tesouro = 46;
}

// Alguns estados são mantidos nesta variável.
message ParametrosDesenho {
  // Identificador da proxima luz dinamica usada. A luz zero é usado para iluminação ambiente direcional.
  optional int32 luz_corrente = 1 [default=1];
  // OpenGL permite até 8 luzes simultaneas.
  optional int32 max_num_luzes = 2 [default=8];
  // Usado para fazer sliding: a gente cria um plano na altura do click inicial para fazer o movimento
  // paralelo ao plano XY.
  optional float offset_terreno = 3 [default=0];
  // Coordenadas de picking. A presenca de qualquer um destes campos indica picking.
  optional int32 picking_x = 28;
  optional int32 picking_y = 29;
  // Verdadeiro quando se esta desenhando a entidade selecionada.
  optional bool entidade_selecionada = 4 [default=false];
  // Verdadeiro quando se quer desenhar as luzes.
  optional bool iluminacao = 5 [default=true];
  // Verdadeiro quando se quer desenhar as entidades e as formas.
  optional bool desenha_entidades = 6 [default=true];
  // Verdadeiro para desenhar texturas.
  optional bool desenha_texturas = 7 [default=true];
  // Desenha a grade do tabuleiro.
  optional bool desenha_grade = 8 [default=true];
  // Desenha a aura das entidades.
  optional bool desenha_aura = 9 [default=true];
  // Desenha o indicador de FPS.
  optional bool desenha_fps = 10 [default=false];
  // Operacao de limpeza eh cara, alguns modos nao precisam dela.
  optional bool limpa_fundo = 11 [default=true];
  // Usar transparencia.
  optional bool transparencias = 12 [default=true];
  // Desenhar sombras.
  optional bool desenha_sombras = 13 [default=true];
  optional bool desenha_sombra_projetada = 45 [default=false];
  // Modo de desenho.
  optional bool modo_mestre = 14 [default=true];
  // Alfa para translucidos.
  optional float alfa_translucidos = 15 [default=0.5];
  // Alguns efeitos usam escala e translacao pos transformacoes para desenharem. Sao aplicados na ordem que aparecem abaixo.
  optional Posicao escala_efeito = 50;
  optional Posicao rotacao_efeito = 51;  // nesse caso, o angulo esta no eixo.
  optional Posicao translacao_efeito = 52;
  // Caso verdadeiro, a textura sempre ficara de frente para a camera.
  optional bool texturas_sempre_de_frente = 16 [default=true];
  // Posicao do olho.
  optional Posicao pos_olho = 17;
  // Desenhar acoes de jogadores.
  optional bool desenha_acoes = 18 [default=true];
  // Se verdadeiro, desenha a lista de pontos de vida.
  optional bool desenha_lista_pontos_vida = 20 [default=true];
  // Se verdadeiro, desenha o quadrado de selecao.
  optional bool desenha_quadrado_selecao = 21 [default=true];
  // Se verdadeiro, desenha o rastro de movimento das unidades ao se moverem.
  optional bool desenha_rastro_movimento = 22 [default=true];
  // Se verdadeiro, as texturas serao viradas sempre para cima.
  optional bool desenha_texturas_para_cima = 23 [default=false];
  // Se verdadeiro, desenha a forma selecionada.
  optional bool desenha_forma_selecionada = 24 [default=true];
  // Se verdadeiro, desenha a rosa dos ventos.
  optional bool desenha_rosa_dos_ventos = 25 [default=true];
  // Se verdadeiro, desenha os pontos de rolagem do tabuleiro.
  optional bool desenha_pontos_rolagem = 26 [default=true];
  // Se verdadeiro, aplica efeito de nevoa.
  optional bool desenha_nevoa = 27 [default=true];
  // Informacoes sobre a nevoa, se houver.
  optional Nevoa nevoa = 70;
  // Se verdadeiro, desenha o id da acao corrente.
  optional bool desenha_id_acao = 30 [default=true];
  // Se verdadeiro, desenha o controle virtual de acoes.
  optional bool desenha_controle_virtual = 31 [default=true];
  // Se false, os detalhes nao serao desenhados.
  optional bool desenha_detalhes = 33 [default=true];
  // Se false, desenha as coordenadas do quadrado selecionado.
  optional bool desenha_coordenadas = 37 [default=true];
  // Tipo de visao da entidade presa.
  optional TipoVisao tipo_visao = 39;
  optional float multiplicador_visao_penumbra = 40 [default=1.2];

  // Opcoes por entidade.
  // Se verdadeiro, desenha a barra de vida da entidade.
  optional bool desenha_barra_vida = 19 [default=false];
  // Se verdadeiro, desenha o rotulo da entidade.
  optional bool desenha_rotulo = 32 [default=false];
  // Se verdadeiro, desenha o rotulo especial da entidade.
  optional bool desenha_rotulo_especial = 34 [default=false];
  // Desenha sinalizacao de eventos.
  optional bool desenha_eventos_entidades = 35 [default=true];
  // Efeitos das entidades.
  optional bool desenha_efeitos_entidades = 36 [default=true];
  // Se verdadeiro, desenha a lista de objetos (depuracao).
  optional bool desenha_lista_objetos = 38 [default=false];
  // Se verdadeiro, desenha a lista de jogadores.
  optional bool desenha_lista_jogadores = 41 [default=false];
}

// Para copiar e colar.
message EntidadesCopiadas {
  repeated EntidadeProto entidade = 1;
}
