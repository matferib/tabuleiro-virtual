import "ent/acoes.proto";
import "ent/comum.proto";

package ent;
option java_package = "com.matferib.Tabuleiro.ent";

enum TipoEntidade {
  TE_ENTIDADE = 0;
  TE_FORMA = 1;
  TE_COMPOSTA = 10;
}

// A ordem dos valores da enum deste proto eh importante, porque eh usada para construir o menu de desenho.
enum TipoForma {
  TF_CILINDRO = 0;
  TF_CIRCULO = 1;
  TF_CONE = 2;
  TF_CUBO = 3;
  TF_ESFERA = 4;
  TF_LIVRE = 5;
  TF_PIRAMIDE = 6;
  TF_RETANGULO = 7;
  TF_TRIANGULO = 8;
}

// Como uma arma esta empunhada.
// Na UI, deve ter a mesma ordem no combo.
enum EmpunhaduraArma {
  // Apenas arma e mais nada.
  EA_ARMA_APENAS = 0;
  // Empunhada em duas maos.
  EA_2_MAOS = 1;
  // 2 armas: empunhada na mao boa.
  EA_MAO_BOA = 2;
  // 2 armas: empunhada na mao ruim.
  EA_MAO_RUIM = 3;
  // Arma e escudo.
  EA_ARMA_ESCUDO = 4;
  // Monstros.
  EA_MONSTRO_ATAQUE_PRIMARIO = 5;
  EA_MONSTRO_ATAQUE_SECUNDARIO = 6;
}

// Os tipos de movimento, em quadrados, da entidade.
message Movimento {
  // valores computados.
  optional Bonus terrestre_q = 1;
  optional Bonus aereo_q = 2;
  optional Bonus aquatico_q = 3;
  optional Bonus escavando_q = 4;
  optional Bonus escalando_q = 5;
  // valores basicos.
  optional int32 terrestre_basico_q = 10;
  optional int32 aereo_basico_q = 11;
  optional int32 aquatico_basico_q = 12;
  optional int32 escavando_basico_q = 13;
  optional int32 escalando_basico_q = 14;
}

// Proximo id: 91.
message EntidadeProto {
  // Tipo da entidade, determinada pela classe folha. Nao deve ser alterado.
  // Isso aqui eh o tipo do jogo e nao das regras de D&D.
  optional TipoEntidade tipo = 1;
  // O tipo da entidade segundo as regras de dnd.
  repeated TipoDnD tipo_dnd = 86;
  optional TipoForma sub_tipo = 18;
  optional Movimento movimento = 90;
  // Identificador global da entidade composto pelo id_criador << 28 | id_local.
  // Portanto, o maximo de jogadores é 16. É importante que o identificador da entidade caiba em
  // um GLuint para permitir realização da operação de picking no 3d.
  optional uint32 id = 2;
  // Pontos de vida da entidade.
  optional int32 pontos_vida = 11;
  // Pontos de vida temporarios, computados a partir do bonus.
  optional int32 pontos_vida_temporarios = 59;
  // A fonte de cada ponto de vida temporario. Fontes iguais so a maior se aplica. Fontes diferentes acumular (do FAQ).
  optional Bonus pontos_vida_temporarios_por_fonte = 81;
  // Quantidade de dano nao letal.
  optional int32 dano_nao_letal = 82;

  // Maximo de pontos de vida da entidade.
  optional int32 max_pontos_vida = 12;
  // Exemplo: 4d8 + 8.
  optional string dados_vida = 19;
  // Para os jogadores poderem se identificar.
  optional string rotulo = 20;
  // Informacoes adicionais sobre a entidade. Visivel apenas para o mestre ou se a entidade puder ser selecionada.
  // Algumas informacoes serao concatenadas ao valor do campo.
  repeated string rotulo_especial = 30;
  // O tamanho final da entidade.
  optional TamanhoEntidade tamanho = 3 [default=TM_MEDIO];
  // O tamanho da entidade.
  optional Bonus bonus_tamanho = 78;
  // Se verdadeiro, objeto sera desenhado de forma achatada.
  optional bool achatado = 17 [default=false];
  // Posicao atual da entidade. Note que o Z eh quanto a criatura esta acima da translacao. A real posicao dela
  // esta em pos.z + translacao.z.
  optional Posicao pos = 4;
  // Se a entidade tiver, usa esta posicao ao inves da posicao padrao.
  optional Posicao posicao_acao = 89;
  // Para formas (exceto translacao).
  repeated Posicao ponto = 21;
  optional Escala escala = 22;
  optional float rotacao_z_graus = 23;  // rotacao do objeto ao redor de Z em graus.
  optional float rotacao_y_graus = 29;  // rotacao do objeto ao redor de Y em graus.
  optional float rotacao_x_graus = 33;  // rotacao do objeto ao redor de X em graus.
  optional float translacao_z_deprecated = 24 [deprecated=true];
  repeated EntidadeProto sub_forma = 25;  // Para entidades compostas.
  enum TipoTransicao {
    TRANS_NENHUMA = 0;
    // Acao na entidade transita cenario.
    TRANS_CENARIO = 1;
    // Acao na entidade recolhe tesouro.
    TRANS_TESOURO = 2;
  }
  optional TipoTransicao tipo_transicao = 61;
  // Algumas formas permitem a transicao de um cenario para outro. Quando presente, esta forma tera a capacidade de transitar
  // entidades e a camera para outro cenario. Valor de -1 eh usado para cenario principal e -2 eh reservado para limpar a transicao.
  optional Posicao transicao_cenario = 35;

  // Destino da entidade.
  optional Posicao destino = 5;
  // Cor da entidade.
  optional Cor cor = 6;
  // Iluminação da entidade.
  optional IluminacaoPontual luz = 7;
  // Textura.
  optional InfoTextura info_textura = 8;
  // Modelo 3d.
  optional Modelo3d modelo_3d = 34;

  // BITS DAS ENTIDADE.
  optional int32 aura = 9 [deprecated=true];
  optional float aura_m = 41;
  // Visibilidade. Apenas o dono pode ver.
  optional bool visivel = 10 [default=true];
  // Verdadeiro se a entidade for voadora.
  optional bool voadora = 13 [default=false];
  optional float z_antes_voo = 49;
  // Entidade esta caida.
  optional bool caida = 14 [default=false];
  // Entidade esta morta.
  optional bool morta = 15 [default=false];
  // Se false, apenas o mestre pode ver propriedades da entidade, seleciona-la e fazer picking.
  optional bool selecionavel_para_jogador = 16 [default=true];
  // Se verdadeiro, o mestre nao conseguira selecionar a entidade. Ela sera apenas editavel com duplo clique.
  optional bool fixa = 32 [default=false];
  // Se falso, a entidade nao faz sombra.
  optional bool faz_sombra = 39 [default=true];
  // Tipo de visao da entidade.
  optional TipoVisao tipo_visao = 36;
  // Alcance da visao no escuro em metros.
  optional float alcance_visao_m = 37;
  // Entidade causa colisao.
  optional bool causa_colisao = 48;
  // Indica que a entidade esta apoiada.
  optional bool apoiada = 50 [default=true];
  // Indica que a entidade esta espiando de um lado ou do outro. -1 esquerda, 1 direita.
  optional int32 espiando = 58;
  // Se verdadeiro, desligara luz para desenho.
  optional bool ignora_luz = 75;
  // Se verdadeiro, desligara backface culling.
  optional bool dois_lados = 76;

  // TODO implementar as coisas de surpresa.
  optional bool surpreso = 64;
  // Indica que o ataque dara dano furtivo. Para saber se a entidade tem furtivo, ver dano_furtivo.
  optional bool furtivo = 62;
  optional bool fumegando = 67;
  // Ids das entidades agarradas.
  repeated uint32 agarrado_a = 71;

  // Ultima acao para display. O valor eh um id no mapa de acoes do tabuleiro.
  optional string ultima_acao = 26;
  // Ultimas acoes executadas da unidade. Funciona como uma fila onde o indice 0 eh a acao mais recente e o
  // tamanho maximo eh dado pela constante MaxNumAcoes.
  repeated string lista_acoes = 38;
  // Resultado da proxima salvacao da entidade.
  optional ResultadoSalvacao proxima_salvacao = 27;
  // A direcao do ultimo impacto sofrido pela entidade.
  optional Posicao direcao_queda = 28;
  // Evento de entidade. A cada rodada, o contador de rodadas diminuira ate zero.
  // Ao termino do contador, o tabuleiro sinalizara a entidade.
  message Evento {
    optional int32 rodadas = 1;
    optional string descricao = 2;
    optional TipoEfeito id_efeito = 4;     // Se o evento for reconhecido como algum efeito, o id estara aqui. (ver EFEITO_*).
    repeated int32 complementos = 3;       // Alguns efeitos tem complementos.
    repeated string complementos_str = 8;  // Complementos na forma de string.
    optional bool processado = 5;          // indica que o evento ainda nao foi processado. Alguns tipos de efeito usam isso.
    // Identificador unico para o efeito. Util para desfazer fim de efeitos e mensagens de desfazer.
    optional uint32 id_unico = 6;
    // Indica que efeito nao expira (nao precisa decrementar contador de rodadas).
    optional bool continuo = 7;
  }
  repeated Evento evento = 31;

  optional Atributos atributos = 68;

  // Dados para um ataque especifico.
  // Como depende de AcaoProto, nao movi para comum.
  message DadosAtaque {
    // O rotulo de um ataque, para identificacao. Identifica uma arma.
    optional string rotulo = 9;
    // Ataques com mesmo nome de grupo sao considerados parte da mesma acao.
    optional string grupo = 40;

    // Deve casar com as strings de id do arquivo de dados das acoes.
    optional string tipo_ataque = 1;
    optional TipoAcao tipo_acao = 39;
    // Bonus final para ataque.
    optional int32 bonus_ataque_final = 2;
    // O dano final da arma: 1d8+5.
    optional string dano = 3;
    optional int32 margem_critico = 6 [default=20];
    optional int32 multiplicador_critico = 7 [default=2];
    // Devem ser derivados do dado de defesa.
    optional int32 ca_normal = 4;
    optional int32 ca_surpreso = 5;
    optional int32 ca_toque = 8;
    optional float alcance_m = 10;
    optional float alcance_minimo_m = 33;
    optional int32 incrementos = 11;  // Quantos incrementos de distancia sao permitidos.
    // A diferenca desses dois eh importante.
    // O campo acao eh o valor final, recomputado sempre a partir da acao da arma e da acao_fixa.
    // Por que nao deixar tudo na arma? Alguns monstros tem modificadores de dados de ataque
    // sem usar armas, portanto eles tem na entrada deles acao_fixa. Por exemplo, o ankheg.
    // Caso o jato dele tivesse acao ao inves de acao_fixa, qualquer mudanca que cause recomputacao
    // (tipo drenar forca), apagaria o campo acao.
    optional AcaoProto acao = 12;     // Para fazer merge com a acao do tipo_ataque.
    optional AcaoProto acao_fixa = 41;  // Sempre sera aplicada ao recalcular o dado de ataque.
    // Indica arma obra prima. Modifica bonus_ataque.
    optional bool obra_prima = 14;
    optional EmpunhaduraArma empunhadura = 15;
    // Arma permite acuidade.
    optional bool acuidade = 17;
    // Para arcos compostos.
    optional int32 bonus_composto = 20;
    // Os bonus de ataque e dano.
    optional Bonus bonus_ataque = 21;
    optional Bonus bonus_dano = 22;
    // Apenas o dano basico da arma, parseavel (exemplo: '1d8 (19-20/x3)').
    optional string dano_basico = 23;
    // Gera o dano basico independente de tamanho ou qualquer outra coisa.
    optional string dano_basico_fixo = 37;
    // Chave da arma na tabela de armas (Exemplo: 'espada_longa').
    optional string id_arma = 24;
    // A arma pode ter tamanho diferente.
    optional TamanhoEntidade tamanho = 26;
    // Dano adicional nao eh multiplicado em criticos. Exemplo: dano de fogo de uma arma flamejante.
    // TODO implementar.
    optional string dano_adicional = 27;
    // Indica ataque de toque.
    optional bool ataque_toque = 28;
    // Indica que o ataque eh a distancia.
    optional bool ataque_distancia = 29;
    // Indica ataque de agarrar.
    optional bool ataque_agarrar = 30;
    // Bonus magico da arma. Modifica o bonus_ataque e bonus_dano.
    optional int32 bonus_magico = 31;
    // Cada ataque apos o primeiro recebe penalidade de -5. O primeiro ataque tem ordem 0.
    optional int32 ordem_ataque = 32;
    // Ataque da dano nao letal.
    optional bool nao_letal = 34;
    // Para agarrar.
    optional bool ignora_ataque_toque = 35;
    // Para efeitos que criam dados ataque.
    optional uint32 id_unico_efeito  = 36;
    // Municao para a arma.
    optional uint32 municao = 38;
    // Para ataques com veneno.
    optional VenenoProto veneno = 42;
    // Se presente, ataque desaparecerá após ser usado esse número de vezes.
    // É diferente de munição, que permanece após zerar.
    optional int32 limite_vezes = 43;
    // TODO: passar isso tudo pra acao? Me parece mais adequado.
    // Ferro frio, adamante etc.
    optional DescritorAtaque material_arma = 46;
    // Perfurante, cortante, estourante. Algumas armas sao de mais de um tipo.
    repeated DescritorAtaque tipo_ataque_fisico = 47;
    // Bem, mal, caos, leal.
    optional DescritorAtaque alinhamento = 48;

    // Para armas que tem que ser carregadas.
    optional bool requer_carregamento = 49;
    optional bool descarregada = 50;
  }
  repeated DadosAtaque dados_ataque = 44;

  // Independe de ataque especifico.
  message DadosAtaqueGlobal {
    optional string dano_furtivo = 1;
    // Ver funcao ModificadorAtaque em util.
    // Alguns bonus de ataque genericos.
    optional bool ataque_menos_1 = 2;
    optional bool ataque_menos_2 = 3;
    optional bool ataque_menos_4 = 4;
    optional bool ataque_menos_8 = 14;
    optional bool ataque_mais_1 = 5;
    optional bool ataque_mais_2 = 6;
    optional bool ataque_mais_4 = 7;
    optional bool ataque_mais_8 = 15;
    // Dano generico.
    optional bool dano_menos_1 = 8;
    optional bool dano_menos_2 = 9;
    optional bool dano_menos_4 = 10;
    optional bool dano_menos_8 = 19;
    optional bool dano_mais_1 = 11;
    optional bool dano_mais_2 = 12;
    optional bool dano_mais_4 = 13;
    optional bool dano_mais_8 = 16;
    optional bool dano_mais_16 = 17;
    optional bool dano_mais_32 = 18;

    // Se presente, representa a chance de falha de ataque. Um valor negativo indica que ignora
    // a chance de falha causada pela defesa.
    optional int32 chance_falha = 25;
  }
  optional DadosAtaqueGlobal dados_ataque_global = 73;

  optional DadosDefesa dados_defesa = 45;

  // Geracao de tesouro automatica?
  message DadosTesouro {
    optional string tesouro = 1;
    repeated ItemMagicoProto pocoes = 2;
    repeated ItemMagicoProto aneis = 3;
    repeated ItemMagicoProto mantos = 4;
    repeated ItemMagicoProto luvas = 5;
    repeated ItemMagicoProto bracadeiras = 6;
  }
  optional DadosTesouro tesouro = 46;
  // Dados de iniciativa da entidade.
  optional int32 iniciativa = 55;
  optional int32 modificador_iniciativa = 56;
  optional Bonus bonus_iniciativa = 69;
  // Algumas entidades tem varias formas. Neste caso, a primeira sera a original para poder reverter
  // enquanto as outras serao as alternativas. Ou seja, eh 0 ou 2+.
  repeated EntidadeProto formas_alternativas = 60;
  // Se houver forma alternativa, indica qual esta em uso.
  optional int32 forma_alternativa_corrente = 74;

  // Informacoes sobre a classe do personagem.
  repeated InfoClasse info_classes = 63;
  optional int32 niveis_negativos = 83;

  // Bonus base de ataque.
  message InfoBBA {
    optional int32 base = 1;
    optional int32 agarrar = 2;
    optional int32 cac = 3;
    optional int32 distancia = 4;
  }
  optional InfoBBA bba = 70;

  // Mesmo que haja um modelo 3d, desenha o tijolo de base da entidade.
  optional bool desenha_base = 65;
  // Outras coisas de entidade, apenas para armazenamento.
  optional string notas = 66;

  message InfoTalentos {
    // Gerais respeita os niveis.
    repeated TalentoProto gerais = 1;
    // Qualquer coisa que nao se enquadre nas regras.
    repeated TalentoProto outros = 2;
  }
  optional InfoTalentos info_talentos = 79;
  repeated InfoPericia info_pericias = 85;

  // Alinhamento ou tendencia.
  message TendenciaDetalhada {
    // Daqui se geram os eixos.
    optional TendenciaSimplificada simples = 3;
    optional float eixo_bem_mal = 1 [default = 0.5];
    optional float eixo_ordem_caos = 2 [default = 0.5];
  }
  optional TendenciaDetalhada tendencia = 80;
  // XP do personagem.
  optional int32 experiencia = 84;

  // Informacao sobre um feitico conhecido.
  message InfoConhecido {
    // Identificador do feitico, usado pelo slot.
    optional string id = 1;
    optional string nome = 2;
    // Indica feitico de domino.
    optional bool dominio = 3;
  }
  // As magias prontas para lancamento.
  message InfoLancar {
    // Identifica o feitico (se tiver que memorizar).
    optional int32 nivel_conhecido = 1;
    optional int32 indice_conhecido = 2;
    // Indica slot usado.
    optional bool usado = 3;
    optional int32 indice = 4;
  }
  message FeiticosPorNivel {
    // Nivel dos feiticos. Preenchido apenas em notificacoes de alteracao de feitico.
    optional int32 nivel = 1;

    // Esses arrays sao sempre indexado por nivel, mesmo que nao haja nivel 0.
    repeated InfoConhecido conhecidos = 5;
    repeated InfoLancar para_lancar = 6;
  }
  message InfoFeiticosClasse {
    optional string id_classe = 1;
    repeated FeiticosPorNivel feiticos_por_nivel = 5;
  }
  repeated InfoFeiticosClasse feiticos_classes = 87;
  // Indica a classe de feitico ativa.
  optional string classe_feitico_ativa = 88;
  // Fim feiticos.
}
