syntax = "proto2";
package ent;
option java_package = "com.matferib.Tabuleiro.ent";

message Moedas {
  optional int32 po = 1;
  optional int32 pp = 2;
  optional int32 pc = 3;
  optional int32 pl = 4;
  optional int32 pe = 5;
}

// Um modelo generico baseado em nivel.
enum ModeloGenerico {
  MG_UM = 0;
  MG_UM_CADA_NIVEL_IMPAR_MAX_5 = 1;  // misseis magicos.
  MG_UM_POR_NIVEL = 2;  // velocidade
  MG_UM_CADA_3_NIVEIS = 3;  // aterrorizar
  MG_UM_MAIS_UM_CADA_4_APOS_TERCEIRO_MAXIMO_3 = 4;  // raio ardente.
}

enum TipoMagia {
  TM_NENHUMA = 0;
  TM_ARCANA = 1;
  TM_DIVINA = 2;
}

enum TendenciaSimplificada {
  TD_LEAL_BOM = 0;
  TD_LEAL_NEUTRO = 1;
  TD_LEAL_MAU = 2;
  TD_NEUTRO_BOM = 3;
  TD_NEUTRO = 4;
  TD_NEUTRO_MAU = 5;
  TD_CAOTICO_BOM = 6;
  TD_CAOTICO_NEUTRO = 7;
  TD_CAOTICO_MAU = 8;
  // Aleatorias
  TD_NORMALMENTE_LEAL_BOM = 9;
  TD_NORMALMENTE_LEAL_NEUTRO = 10;
  TD_NORMALMENTE_LEAL_MAU = 11;
  TD_NORMALMENTE_NEUTRO_BOM = 12;
  TD_NORMALMENTE_NEUTRO = 13;
  TD_NORMALMENTE_NEUTRO_MAU = 14;
  TD_NORMALMENTE_CAOTICO_BOM = 15;
  TD_NORMALMENTE_CAOTICO_NEUTRO = 16;
  TD_NORMALMENTE_CAOTICO_MAU = 17;
}

enum TamanhoEntidade {
  TM_MINUSCULO = 0;
  TM_DIMINUTO = 1;
  TM_MIUDO = 2;
  TM_PEQUENO = 3;
  TM_MEDIO = 4;
  TM_GRANDE = 5;
  TM_ENORME = 6;
  TM_IMENSO = 7;
  TM_COLOSSAL = 8;
}

// Os efeitos sao tabelados. Na tabela, existe uma tabela de efeito que define o
// que cada um faz. Outros sao hardcoded.
// Proximo id: 151.
enum TipoEfeito {
  EFEITO_INVALIDO = -1;
  EFEITO_OUTRO = 0;     // evento sem efeito conhecido.
  EFEITO_REFLEXOS = 1;  // complemento: numero de imagens.
  EFEITO_PISCAR = 2;
  EFEITO_NUBLAR = 3;
  EFEITO_FORCA_TOURO = 4;
  EFEITO_AGILIDADE_GATO = 5;
  EFEITO_ACELERAR = 6;
  EFEITO_AUMENTAR_PESSOA = 7;
  EFEITO_REDUZIR_PESSOA = 8;
  EFEITO_ARMADURA = 9;
  EFEITO_ARMADURA_NATURAL_MELHORIA = 59;
  EFEITO_ESCUDO_FE       = 10;
  EFEITO_SABEDORIA_CORUJA = 11;
  EFEITO_ASTUCIA_RAPOSA = 12;
  EFEITO_ESPLENDOR_AGUIA = 13;
  EFEITO_VIGOR_URSO = 14;
  EFEITO_ROUPA_ENCANTADA = 15;
  EFEITO_ESCUDO_ENCANTADO = 16;
  EFEITO_ESCUDO_ARCANO = 68;
  EFEITO_HEROISMO = 17;
  EFEITO_PELE_ARVORE = 18;
  EFEITO_PROTECAO_CONTRA_MAL = 19;
  EFEITO_PROTECAO_CONTRA_BEM = 20;
  EFEITO_PROTECAO_CONTRA_CAOS = 21;
  EFEITO_PROTECAO_CONTRA_ORDEM = 22;
  EFEITO_PROTECAO_CONTRA_ELEMENTOS = 69;
  EFEITO_IMUNIDADE_ELEMENTO = 66;
  EFEITO_LUZ = 67;
  EFEITO_FURIA = 23;
  // A furia do barbaro tem alguns efeitos a mais, como fadiga apos efeito e bonus de vontade contra encantamento.
  EFEITO_FURIA_BARBARO = 24;
  EFEITO_FADIGA = 25;
  // fim furia.
  EFEITO_INVISIBILIDADE = 26;
  EFEITO_AJUDA = 27;
  EFEITO_SUPORTAR_ELEMENTOS = 28;
  EFEITO_RESISTENCIA_ELEMENTOS = 29;
  EFEITO_SANTUARIO = 30;
  // Complemento é o rotulo.
  EFEITO_ABENCOAR_ARMA = 31;
  EFEITO_BENCAO = 64;
  EFEITO_MALDICAO_MENOR = 65;

  EFEITO_PEDRA_ENCANTADA = 32;
  EFEITO_DEFLEXAO_CA = 33;
  // Complemento eh o valor do bonus.
  EFEITO_RESISTENCIA_SALVACAO = 34;
  // Complemento str 0: pericia. Complemento 0: valor.
  EFEITO_COMPETENCIA_PERICIA = 35;
  EFEITO_MELHORIA_FORCA = 36;
  EFEITO_MELHORIA_DESTREZA = 37;
  EFEITO_MELHORIA_CONSTITUICAO = 54;
  EFEITO_MELHORIA_INTELIGENCIA = 55;
  EFEITO_MELHORIA_SABEDORIA = 56;
  EFEITO_MELHORIA_CARISMA = 57;
  // Indica que entidade esta envenenada.
  EFEITO_VENENO = 38;
  // Dano de atributo por causa de veneno.
  // Os complementos indicam quanto de dano em cada atributo: for, des, con, int, sab, car, nesta ordem.
  EFEITO_DANO_ATRIBUTO_VENENO = 39;
  // O complemento é da forma: rotulo, alinhamento.
  EFEITO_TENDENCIA_EM_ARMA = 40;
  EFEITO_ENREDADO = 41;  // entangled.
  // Dura 1s.
  EFEITO_QUEIMANDO_FOGO_ALQUIMICO = 42;
  // Magia de sono.
  EFEITO_SONO = 43;
  // Morto por efeito de morte.
  EFEITO_MORTE = 44;
  // Complementos informam valor para ataque e dano respectivamente para arcos.
  EFEITO_COMPETENCIA_ATAQUE_DANO_ARQUEARIA = 45;
  // Complemento eh o quanto fica magico. Complemento str eh o rotulo.
  EFEITO_ARMA_MAGICA = 47;
  EFEITO_PRESA_MAGICA = 48;
  EFEITO_ATORDOADO = 49;
  EFEITO_ENFEITICADO = 50;  // charmed.
  EFEITO_SUGESTAO = 51;
  EFEITO_NAUSEA = 52;
  EFEITO_INVESTIDA = 53;
  EFEITO_CONFUSAO = 58;
  EFEITO_ORIENTACAO = 60;
  EFEITO_MORTO_VIVO_EXPULSO = 61;
  EFEITO_MORTO_VIVO_FASCINADO = 62;
  EFEITO_VOO = 63;
  EFEITO_ATAQUE_CERTEIRO = 70;
  EFEITO_PASMAR = 71;
  EFEITO_OFUSCADO = 72;
  EFEITO_LER_MAGIAS = 73;
  EFEITO_LEQUE_CROMATICO = 74;
  EFEITO_POEIRA_OFUSCANTE = 75;
  EFEITO_AMEDRONTADO = 76;
  EFEITO_ABALADO = 77;
  EFEITO_AUXILIO_DIVINO = 78;
  EFEITO_PROTEGER_OUTRO = 79;
  EFEITO_IMOBILIZADO = 80;
  EFEITO_CURA_ACELERADA = 81;
  EFEITO_ORACAO_ALIADOS = 82;
  EFEITO_ORACAO_INIMIGOS = 83;
  EFEITO_DESLOCAMENTO = 84;
  EFEITO_CEGO = 85;
  EFEITO_PENALIDADE_FORCA = 86;
  EFEITO_PENALIDADE_DESTREZA = 87;
  EFEITO_PENALIDADE_CONSTITUICAO = 88;
  EFEITO_PENALIDADE_INTELIGENCIA = 89;
  EFEITO_PENALIDADE_SABEDORIA = 90;
  EFEITO_PENALIDADE_CARISMA = 91;
  EFEITO_FORMA_GASOSA = 92;
  EFEITO_LAMINA_AFIADA = 93;
  EFEITO_DRENAR_TEMPORARIO = 94;
  EFEITO_VITALIDADE_ILUSORIA = 95;
  EFEITO_SEM_NOME_FORCA = 96;
  EFEITO_MISSAO_MENOR = 97;
  EFEITO_ENSURDECIDO = 98;
  EFEITO_EXAUSTO = 99;
  EFEITO_INVISIBILIDADE_CONTRA_MORTOS_VIVOS = 101;
  EFEITO_PROTECAO_CONTRA_MORTE = 102;
  EFEITO_PODER_DIVINO = 103;
  EFEITO_RESISTENCIA_MAGIA = 104;
  EFEITO_DISSIPAR_MAL = 105;
  EFEITO_DISSIPAR_BEM = 106;
  EFEITO_DISSIPAR_CAOS = 107;
  EFEITO_DISSIPAR_ORDEM = 108;
  EFEITO_MOVIMENTACAO_LIVRE = 109;
  EFEITO_METAMORFOSE_TORRIDA = 110;
  EFEITO_PARALISIA = 111;
  EFEITO_INSPIRAR_CORAGEM = 112;
  EFEITO_FASCINADO = 113;
  EFEITO_BOA_ESPERANCA= 114;
  EFEITO_DESESPERO_ESMAGADOR = 115;
  EFEITO_FLECHA_ACIDA = 116;
  EFEITO_PELE_ROCHOSA = 117;
  EFEITO_VER_INVISIVEL = 118;
  EFEITO_IMUNIDADE_FEITICO = 119;
  EFEITO_INCONSCIENTE = 120;
  EFEITO_CRIAR_CHAMA = 121;
  EFEITO_LAMINA_FLAMEJANTE = 122;
  EFEITO_FOGO_DAS_FADAS = 123;
  EFEITO_BOM_FRUTO = 124;
  EFEITO_PASSOS_LONGOS = 125;
  EFEITO_DOMINIO_PROTECAO = 126;
  EFEITO_VIRTUDE = 127;
  EFEITO_ARMA_ABENCOADA = 128;
  EFEITO_INVISIBILIDADE_CONTRA_ANIMAIS = 129;
  EFEITO_ESFRIAR_METAL = 130;
  EFEITO_CONVOCAR_RELAMPAGOS = 131;
  EFEITO_RETARDAR_ENVENENAMENTO = 132;
  EFEITO_REDUZIR_ANIMAL = 133;
  EFEITO_ESQUENTAR_METAL = 134;
  EFEITO_DOENCA = 135;
  EFEITO_DRENAR_FORCA_VITAL = 136;
  EFEITO_DESARMADO = 137;
  EFEITO_PRESA_MAGICA_MAIOR = 138;
  EFEITO_ESCUDO_ENTROPICO = 139;
  EFEITO_NEUTRALIZAR_VENENO = 140;
  EFEITO_LUFADA_DE_VENTO = 141;
  EFEITO_DOMINAR_ANIMAL = 142;
  EFEITO_DOMINAR_PESSOA = 143;
  EFEITO_DESTRUICAO_MORTO_VIVO = 144;
  // Diferente de imobilizado, porque ainda pode se mexer, mas não pode mover. Ver teia.
  EFEITO_NAO_PODE_MOVER = 145;
  // Indica que personagem está conjurando.
  EFEITO_CONJURANDO = 146;
  // Entidade assume as características do proto no complemento.
  EFEITO_ALTERAR_FORMA = 147;
  EFEITO_APRISIONADO_ELEMENTAL = 148;
  EFEITO_RISO_HISTERICO = 149;
  EFEITO_ADERIDO = 150;
  EFEITO_ELIXIR_CUSPIR_FOGO = 151;
}

enum TipoEfeitoModelo {
  EFEITO_MODELO_INVALIDO = 0;
  EFEITO_MODELO_VULTO = 1;
  EFEITO_MODELO_CELESTIAL = 2;
  EFEITO_MODELO_ABISSAL = 3;
}

// Tipo de visao para entidades e camera.
enum TipoVisao {
  VISAO_NORMAL = 0;
  VISAO_BAIXA_LUMINOSIDADE = 1;
  VISAO_ESCURO = 2;
  // OR das duas.
  VISAO_ESCURO_E_BAIXA_LUMINOSIDADE = 3;  // tem os 2 tipos.
}

enum TipoAtributo {
  TA_FORCA = 0;
  TA_DESTREZA = 1;
  TA_CONSTITUICAO = 2;
  TA_INTELIGENCIA = 3;
  TA_SABEDORIA = 4;
  TA_CARISMA = 5;
}

enum TipoSalvacao {
  TS_FORTITUDE = 0;
  TS_REFLEXO = 1;
  TS_VONTADE = 2;
}

enum ResultadoSalvacao {
  RS_FALHOU = 0;
  RS_MEIO = 1;
  RS_QUARTO = 2;
  RS_ANULOU = 3;
}

enum TipoDnD {
  TIPO_HUMANOIDE = 0;
  TIPO_MORTO_VIVO = 1;
  TIPO_GOBLINOIDE = 2;
  TIPO_ANIMAL = 3;
  TIPO_PLANTA = 4;
  TIPO_BESTA_MAGICA = 5; // d10 fortitude, reflexo, bba guerreiro, visao escuro 12q, visao na penumbra.
  TIPO_EXTRA_PLANAR = 6;
  TIPO_ABERRACAO = 7;
  TIPO_CONSTRUCTO = 8;
  TIPO_ELEMENTAL = 9;
  TIPO_LIMO = 10;
  TIPO_GIGANTE = 11;
  TIPO_HUMANOIDE_MONSTRUOSO = 12;
  TIPO_VERME = 13;
  // TODO outros.
}

// Atencao: os valores aqui sao usados como inteiros nos mapas dos dados em formato texto (a chave nao pode ser enum).
// Se mudar aqui, conferir os dados todos.
enum SubTipoDnD {
  SUBTIPO_AQUATICO = 0;
  SUBTIPO_ANAO = 1;
  SUBTIPO_ELFO = 2;
  SUBTIPO_GOBLINOIDE = 3;
  SUBTIPO_GNOLL = 4;
  SUBTIPO_GNOMO = 5;
  SUBTIPO_HALFLING = 6;
  SUBTIPO_HUMANO = 7;
  SUBTIPO_ORC = 8;
  SUBTIPO_REPTILIANO = 9;
  SUBTIPO_AR = 10;
  SUBTIPO_CAOS = 11;
  SUBTIPO_TERRA = 12;
  SUBTIPO_MAL = 13;
  SUBTIPO_FOGO = 14;
  SUBTIPO_BEM = 15;
  SUBTIPO_ORDEM = 16;
  SUBTIPO_NATIVO = 17;
  SUBTIPO_AGUA = 18;
  SUBTIPO_ENXAME = 19;
  SUBTIPO_DEMONIO = 20;
  SUBTIPO_PLANAR = 21;
  SUBTIPO_ARCONTE = 22;
  SUBTIPO_KOBOLD = 23;  // Nao existe, so pro bonus de gnomo funcionar.
}

enum DescritorAtaque {
  // descritores de magia.
  DESC_NENHUM = 0;
  DESC_ACIDO = 1;
  DESC_AR = 2;
  DESC_CAOS = 3;
  DESC_FRIO = 4;
  DESC_ESCURIDAO = 5;
  DESC_MORTE = 6;
  DESC_TERRA = 7;
  DESC_ELETRICIDADE = 8;
  DESC_MAL = 9;
  DESC_MEDO = 10;
  DESC_FOGO = 11;
  DESC_FORCA = 12;
  DESC_BEM = 13;
  DESC_LEAL = 14;
  DESC_LUZ = 15;
  DESC_MENTAL = 16;
  DESC_SONICO = 17;
  DESC_AGUA = 18;
  DESC_VENENO = 19;
  DESC_DEPENDENTE_IDIOMA = 20;
  // Outras formas de ataque, nao necessariamente descritores mas funcionam como se fosse.
  DESC_FERRO_FRIO = 21;
  DESC_MADEIRA_NEGRA = 22;
  DESC_MITRAL = 23;
  DESC_ADAMANTE = 24;
  DESC_PRATA_ALQUIMICA = 25;
  DESC_COURO_DRAGAO = 26;
  // tipo de ataque fisico.
  DESC_PERFURANTE = 27;
  DESC_CORTANTE = 28;
  DESC_ESTOURANTE = 29;
  DESC_MAGICO = 30;
  DESC_PETRIFICACAO = 31;
  DESC_MENTAL_PADRAO_VISIVEL  = 32;  // ilusoes visuais, afetam a mente e sao visiveis.
}

enum OperacaoCombinacao {
  OC_NOP = 0;
  OC_COMBINA = 1;
  OC_SOBRESCREVE = 2;
}

// Os tipos de movimento, em quadrados, da entidade.
message Movimento {
  // valores computados.
  optional Bonus terrestre_q = 1;
  optional Bonus aereo_q = 2;
  optional Bonus aquatico_q = 3;
  optional Bonus escavando_q = 4;
  optional Bonus escalando_q = 5;
  // valores basicos.
  optional int32 terrestre_basico_q = 10;
  optional int32 aereo_basico_q = 11;
  optional int32 aquatico_basico_q = 12;
  optional int32 escavando_basico_q = 13;
  optional int32 escalando_basico_q = 14;
}

// Tambem usado como vetor.
message Posicao {
  optional float x = 3;
  optional float y = 4;
  optional float z = 5;
  optional int32 id_cenario = 6 [default=-1];
}

message Cor {
  optional float r = 1 [default=0.0];
  optional float g = 2 [default=0.0];
  optional float b = 3 [default=0.0];
  optional float a = 4 [default=1.0];
}

message IluminacaoPontual {
  optional Cor cor = 1;
  // Metros. Passar para quadrados.
  optional float raio_m = 2;
  optional float atenuacao = 3 [deprecated=true];
  // Para luzes de acao.
  optional float duracao_ms = 4;
}

message Nevoa {
  optional float minimo = 1;
  optional float maximo = 2;
  optional Posicao referencia = 3;  // coordenadas da camera.
  optional Cor cor = 4;
}

message InfoTextura {
  // Identificador da textura. Normalmente o nome do arquivo. Para mapeamento de cubo, sera adicionado
  // pos{xyz} e neg{xyz} apos o nome.
  optional string id = 1;
  // Os valores sao relativos a 1.0. 1.0 x 1.0 eh quadrado.
  optional float largura = 13 [default = 1.0];
  optional float altura = 14 [default = 1.0];
  // Se presente, realiza translacao das coordenadas de textura apos a escala.
  optional float translacao_x = 15 [default = 0.0];
  optional float translacao_y = 16 [default = 0.0];
  // Se presente, multiplica o ponto pelo valor da escala.
  optional float escala_x = 21 [default = 1.0];
  optional float escala_y = 22 [default = 1.0];
  // Para texturas de mapeamento de cubo.
  optional bool textura_cubo = 2;
  // Os bits da texturas lidos de forma crua do arquivo, ainda nao processado. Util para enviar texturas ou armazenar texturas locais
  // dentro de tabuleiros.
  optional bytes bits_crus = 6;
  optional bytes bits_crus_direita = 7;
  optional bytes bits_crus_frente = 8;
  optional bytes bits_crus_cima = 9;
  optional bytes bits_crus_esquerda = 10;
  optional bytes bits_crus_atras = 11;
  optional bytes bits_crus_baixo = 12;
  // Um dos valores GL_REPEAT, GL_MIRRERED_REPEAT, GL_CLAMP_TO_EDGE, GL_CLAMP_TO_BORDER.
  optional int32 modo_textura = 17;
  optional bool textura_bump = 18;
  optional bool textura_movel = 19 [deprecated=true];
  optional int32 periodo_s = 20;  // Para texturas moveis, indica quantos segundos leva para dar a volta.
  optional int32 direcao_graus = 23;  // Para texturas moveis, indica a direcao da rotacao.
}

// A escala nos tres eixos.
message Escala {
  optional float x = 1 [default=1.0];
  optional float y = 2 [default=1.0];
  optional float z = 3 [default=1.0];
}

message Modelo3d {
  // Identificador do modelo 3d.
  optional string id = 1;
  // Para transmissao. Bits do arquivo de modelo.
  optional bytes bits_crus = 6;
  // Translacao do modelo 3d.
  optional Posicao translacao = 7;
  // Escala aplicada, apos translacao.
  optional Escala escala = 8;
}

message Projecao {
  optional int32 tipo_camera = 1;
  optional float plano_corte_proximo_m = 2;
  optional float plano_corte_distante_m = 3;
  optional float campo_visao_vertical_graus = 4;
  optional float razao_aspecto = 5;
  optional float largura_m = 6;
  optional float altura_m = 7;
}

// Os atributos basicos.
message Atributos {
  optional Bonus forca = 1;
  optional Bonus destreza = 2;
  optional Bonus constituicao = 3;
  optional Bonus inteligencia = 4;
  optional Bonus sabedoria = 5;
  optional Bonus carisma = 6;
}

enum TipoCombinacao {
  COMB_E = 0;  // todos descritores sao requeridos
  COMB_OU = 1; // um dos descritores é requerido.
}

// Reducoes de dano de acordo com descritores.
message ReducaoDano {
  repeated DescritorAtaque descritores = 1;
  optional int32 valor = 2;
  optional TipoCombinacao tipo_combinacao = 3;
  optional int32 id_unico = 4;
  optional int32 indice_complemento = 5;
  optional TipoEfeitoModelo id_efeito_modelo = 6;
}

message ResistenciaElementos {
  optional DescritorAtaque descritor = 1;
  optional int32 valor = 2;
  // Para casos com valor variavel de templates (modelos).
  optional int32 indice_complemento = 6;
  // Para resistencias criadas por efeitos.
  optional int32 id_unico = 4;
  // Para resistencia de modelos.
  // Preenchido automaticamente em tabelas.
  optional TipoEfeitoModelo id_efeito_modelo = 5;
}

enum VariacaoRM {
  VRM_BASE = 0;
  VRM_BASE_MAIS_UM_POR_NIVEL = 1;
}

enum TipoEvasao {
  TE_NENHUM = 0;
  TE_EVASAO = 1;
  TE_EVASAO_APRIMORADA = 2;
}

// Por enquanto, apenas para ranger.
message InimigoPredileto {
  // ranger.
  optional string classe = 1;
  // Quantas vezes foi escolhido.
  optional int32 vezes = 2;
  // Qual o tipo.
  optional TipoDnD tipo = 3;
  // E o subtipo, se houver.
  optional SubTipoDnD sub_tipo = 4;
}

// Independe de ataque especifico.
message DadosAtaqueGlobal {
  optional string dano_furtivo = 1;
  // Ver funcao ModificadorAtaque em util.
  // Alguns bonus de ataque genericos.
  optional bool ataque_menos_1 = 2;
  optional bool ataque_menos_2 = 3;
  optional bool ataque_menos_4 = 4;
  optional bool ataque_menos_8 = 14;
  optional bool ataque_mais_1 = 5;
  optional bool ataque_mais_2 = 6;
  optional bool ataque_mais_4 = 7;
  optional bool ataque_mais_8 = 15;
  optional bool ataque_mais_16 = 27;
  // Dano generico.
  optional bool dano_menos_1 = 8;
  optional bool dano_menos_2 = 9;
  optional bool dano_menos_4 = 10;
  optional bool dano_menos_8 = 19;
  optional bool dano_mais_1 = 11;
  optional bool dano_mais_2 = 12;
  optional bool dano_mais_4 = 13;
  optional bool dano_mais_8 = 16;
  optional bool dano_mais_16 = 17;
  optional bool dano_mais_32 = 18;

  // Se presente, representa a chance de falha de ataque. Um valor negativo indica que ignora
  // a chance de falha causada pela defesa.
  optional int32 chance_falha = 25;
  // Algumas criaturas tem isso por serem naturalmente cegas, mas nao sao consideradas cegas.
  optional int32 chance_falha_permanente = 31;
  repeated InimigoPredileto inimigos_prediletos = 26;
  // indica modo furtivo, proximo dano dara dano furtivo.
  optional bool furtivo = 28;
  // Expulsar/fascinar mortos vivos.
  optional int32 maximo_expulsoes_por_dia = 29;
  optional int32 expulsoes_realizadas = 30;
  optional bool flanqueando = 32;
  // A chave deveria ser SubTipoDnD mas mapa nao aceita.
  map<int32, int32> bonus_ataque_por_sub_tipo = 33;
  // A chave deveria ser CategoriaArma, mas mapa nao aceita.
  map<int32, int32> bonus_ataque_por_categoria_arma = 34;
}

// Dados de defesa global (independe de ataque).
// Proximo id: 38.
message DadosDefesa {
  optional string tipo_defesa = 1 [deprecated=true];
  optional bool imune_critico = 3;
  optional bool imune_furtivo = 20;
  optional int32 ca_deprecated = 2 [deprecated=true];
  // Para racas que tem bonus contra certos tipos (como anoes).
  // A chave na verdade é TipoDnD, mas o mapa nao permite.
  map<int32, Bonus> bonus_ca_por_tipo = 36;
  optional Bonus ca = 4;
  optional Bonus salvacao_fortitude = 5;
  optional Bonus salvacao_reflexo = 6;
  optional Bonus salvacao_vontade = 7;
  // Bonus de salvacoes especificas.
  optional Bonus bonus_salvacao_veneno = 29;
  optional Bonus bonus_salvacao_feitico = 30;
  optional Bonus bonus_salvacao_medo = 31;
  optional Bonus bonus_salvacao_encantamento = 32;
  optional Bonus bonus_salvacao_ilusao = 33;

  // TODO outras salvacoes.
  // Nao eh bom colocar as coisas de CA aqui fora porque nas formas alternativas eh feito merge do bonus.
  optional string id_armadura = 8;
  optional string id_escudo = 9;
  optional bool armadura_obra_prima = 10;
  optional bool escudo_obra_prima = 11;
  optional int32 bonus_magico_armadura = 12;
  optional int32 bonus_magico_escudo = 13;
  optional DescritorAtaque material_armadura = 21;
  optional DescritorAtaque material_escudo = 22;
  // Aplicar esquiva contra essa entidade.
  optional uint32 entidade_esquiva = 14;
  // A reducao de dano do barbaro eh mais simples de ser feita, porque independe de tipo de ataque.
  optional int32 reducao_dano_barbaro = 15;
  optional int32 resistencia_magia = 16;
  optional int32 resistencia_magia_racial = 27;
  optional Bonus resistencia_magia_variavel = 24;
  repeated DescritorAtaque imunidades = 17;
  repeated DescritorAtaque vulnerabilidades = 37;
  // Recomputado.
  repeated TipoEfeito imunidade_efeitos = 34;
  // Para monstros usarem.
  repeated TipoEfeito imunidade_efeitos_fixas = 35;
  message ImunidadeFeitico {
    optional string id_feitico = 1;
    optional int32 id_unico = 2;
  }
  repeated ImunidadeFeitico imunidade_feiticos = 28;
  // Reduz ataques que nao corresponderem aos descritores.
  repeated ReducaoDano reducao_dano = 18;
  // Para efeitos elementais: reduz tipos especificos de dano de acordo com descritor do ataque.
  repeated ResistenciaElementos resistencia_elementos = 19;
  // A maior cura acelerada é a que vale. Todas serao do mesmo tipo TB_BASE.
  optional Bonus cura_acelerada = 23;
  // Evasao: dinamico.
  optional TipoEvasao evasao = 25;
  // Para casos de evasao sem ser por classe, exemplo, familiar.
  optional TipoEvasao evasao_estatica = 26;
}

// Se mudar aqui, mudar na UI tb que converte o tipo para indice (TipoParaIndice).
enum TipoBonus {
  TB_ALQUIMICO = 0;
  TB_ARMADURA = 1;
  TB_ARMADURA_MELHORIA = 2;
  TB_ARMADURA_NATURAL = 3;
  TB_ATRIBUTO = 4;
  TB_BASE = 5;
  TB_CIRCUNSTANCIA = 6;
  TB_CLASSE = 7;
  TB_COMPETENCIA = 8;
  TB_DEFLEXAO = 9;
  TB_ESCUDO = 10;
  TB_ESCUDO_MELHORIA = 11;
  TB_ESQUIVA = 12;
  TB_FAMILIAR = 13;
  TB_INERENTE = 14;
  TB_INTUICAO = 15;
  TB_MELHORIA = 16;
  TB_MORAL = 17;
  // cumulativo para poder ter valores negativos.
  TB_NIVEIS_NEGATIVOS = 18;
  // Bonus de atributos ganhados a cada 4 niveis.
  TB_NIVEL = 19;
  TB_PROFANO = 20;
  // cumulativo para aceitar valores negativos.
  TB_RACIAL = 21;
  TB_TEMPLATE = 22;
  TB_RESISTENCIA = 23;
  TB_SAGRADO = 24;
  TB_SINERGIA = 25;
  TB_SORTE = 26;
  TB_TALENTO = 27;
  TB_TAMANHO = 28;
  // Cumulativo.
  TB_SEM_NOME = 29;
  TB_ARMADURA_NATURAL_MELHORIA = 30;
  TB_PENALIDADE_ARMADURA = 31;
  TB_PENALIDADE_ESCUDO = 32;
}


// Um tipo de bonus.
message BonusIndividual {
  optional TipoBonus tipo = 1;
  message PorOrigem {
    optional int32 valor = 1;
    optional string origem = 2;
    // Para preenchimento do valor atraves de complemento.
    optional int32 indice_complemento = 3;
    // Para associar com eventos.
    optional int32 id_unico = 4;
  }
  repeated PorOrigem por_origem = 2;
}

message CondicoesBonus {
  optional bool conjura_magia_arcana = 1;
} 

// Diferentes tipos de bonus.
message Bonus {
  // Se presente, bonus so devera ser aplicado caso o pre requisito seja atendido.
  optional CondicoesBonus condicoes_bonus = 2;
  repeated BonusIndividual bonus_individual = 1;
}

enum ProgressaoBba {
  PBBA_ZERO = 0;
  PBBA_MEIO = 1;
  PBBA_TRES_QUARTOS = 2;
  PBBA_UM = 3;
}

enum ProgressaoConjurador {
  PCONJ_ZERO = 0;
  PCONJ_UM = 1;  // mais comum.
  PCONJ_MEIO_MIN_4 = 2; // ranger, paladino
}

enum ProgressaoExpulsao {
  PEXP_ZERO = 0;          // sem progressao.
  PEXP_UM = 1;            // um por nivel
  PEXP_UM_MENOS_TRES = 2; // nivel menos tres.
}

enum TipoClasse {
  TC_BASICA = 0;
  TC_PRESTIGIO = 1;
  TC_PDM = 2;
  TC_MONSTRO = 3;
}

// Informacoes sobre a classe de um personagem.
// ATENCAO: se adicionar qualquer campo repeated aqui, deve-se conferir a funcao RecomputaDependenciasClasses
// que faz merge com o tabelado.
message InfoClasse {
  optional string id = 1;
  optional string nome = 9;
  optional int32 nivel = 2;
  // Este valor é recomputado para conter os aumentos de classes de prestigio.
  optional int32 nivel_conjurador = 3;
  // Alguns monstros, como Vrock, tem seu proprio nivel de conjurador, independente de HD (12 nivel, 10 HD).
  // Se presente, este campo escreverá o valor do nivel de conjurador.
  optional int32 nivel_conjurador_nativo = 30;
  // Bonus base de ataque do nivel.
  optional int32 bba = 4;
  optional ProgressaoBba progressao_bba = 8;
  // Exemplo: modificador de sabedoria para clerigos.
  optional int32 modificador_atributo_conjuracao = 5;
  // Qual o atributo de conjuracao da classe.
  optional TipoAtributo atributo_conjuracao = 6;
  // Quais salvacoes sao fortes para a classe.
  repeated TipoSalvacao salvacoes_fortes = 7;
  // Como o nivel de conjurador progride.
  optional ProgressaoConjurador progressao_conjurador = 10;
  // Lista das pericias de classe. Caso seja o id de uma classe, herdara dela.
  repeated string pericias = 11;
  // Essas nao vem da tabela de classe, mas sim do modelo do monstro. Ver gaviao-seta como exemplo.
  // Atencao: esta aqui nao eh limpa no merge, portanto NUNCA deve aparecer na tabela de classes.
  repeated string pericias_monstro = 20;
  // Numero de pericias por nivel que a classe ganha.
  optional int32 pericias_por_nivel = 25;
  // Qual o tipo de magia para a classe. Exemplo: feiticeiro usa magia de mago. Caso ausente, usara de id.
  optional string id_para_magia = 12;
  // Pode lancar magia arcana? Divina? Nenhum tipo.
  optional TipoMagia tipo_magia = 28;
  // Para monstros, que conjuram feiticos como classes. Exemplo: phaerimm usa feiticeiro.
  optional string id_para_progressao_de_magia = 18;
  optional bool possui_dominio = 14;
  optional bool precisa_memorizar = 17;
  // Representa os slots para cada nivel de magia. Por exemplo, slots[0] eh o numero de slots de nivel zero para o nivel.
  message ProgressaoParaNivel {
    optional string magias_por_dia = 2;  // Comeca do nivel 0 se a classe possuir feiticos nivel 0, caso contrario, 1.
    optional string conhecidos = 3;      // Comeca sempre do nivel 0.
  }
  // A progressao apresenta os slots para cada nivel da classe. Por exemplo, slots_para_nivel[1] representa os slots para
  // nivel 1 da classe. O indice zero sempre eh vazio.
  message ProgressaoFeitico {
    repeated ProgressaoParaNivel para_nivel = 1;
    optional bool nao_possui_nivel_zero = 2;
  }
  optional ProgressaoFeitico progressao_feitico = 16;
  message HabilidadesEspeciaisPorNivel {
    // Chave da habilidade especial na tabela.
    optional string id = 1;
    // Em qual nivel se ganha.
    optional int32 nivel = 2;
  }
  repeated HabilidadesEspeciaisPorNivel habilidades_por_nivel = 19;
  // Indica que na verdade eh uma progressao de classe de monstro.
  optional bool monstro = 21;
  // Se presente, faz merge com classe ja existente ao inves de criar.
  optional int32 combinar_com = 22;
  // Se presente, classe pode expulsar morto vivo com a progressao passada.
  optional ProgressaoExpulsao progressao_expulsao = 23;
  // Aumenta o nivel de conjurador da primeira classe que tiver nivel de conjurador. Se quiser especificar,
  // tem que preencher aumenta_nivel_conjurador_de.
  optional bool aumenta_nivel_conjurador = 27;
  // Se presente, a classe contribui com nivel de conjurador de outra classe.
  optional string aumenta_nivel_conjurador_de = 24;
  // Indica o tipo da classe tabelada.
  optional TipoClasse tipo_classe = 26;
  // Talentos que a classe ganha automaticamente.
  repeated string talentos_automaticos = 29;
  // so id e complemento.
  repeated TalentoProto talentos_com_complemento_automaticos = 31;
}

// Informacao sobre a pericia do personagem.
// Cada pericia tem a chave e os pontos gastos e um indicador se eh de classe ou nao.
message InfoPericia {
  optional string id = 1;
  optional int32 pontos = 2;
  // Complemento da pericia.
  optional string complemento = 4;
  // Valor final da pericia.
  optional Bonus bonus = 5;
  // As restricoes de sinergia da pericia.
  repeated string restricoes_sinergia = 6;
  // Monstros podem adicionar pericias_monstro em info_classes para considerar a pericia de classe.
}

message RestricaoArma {
  // Uma das restricoes que valem. A ultima é por id.
  optional string prefixo_arma = 1;
  optional bool apenas_armas = 3;
  repeated string id_arma = 2;
  optional bool apenas_armas_para_dano = 4;
}

// Como os efeitos de uma pocao se combinam.
enum CombinacaoEfeitos {
  // Os efeitos se combinam.
  COMB_MULTIPLOS = 0;
  // Os efeitos sao exclusivos (um ou outro).
  COMB_EXCLUSIVO = 1;
}

// Pericias.
message PericiaProto {
  optional string id = 1;
  optional string nome = 2;
  optional bool sem_treinamento = 3;
  optional TipoAtributo atributo = 4;
  optional bool penalidade_armadura = 5;
  optional string complemento = 6;
  message InfoSinergia {
    optional string id = 1;
    // Uma string descrevendo a restricao. Ausente se nao houver.
    optional string restricao = 2;
  }
  repeated InfoSinergia sinergias = 7;
  // Para pericias resistidas.
  optional string id_resistido = 8;
  optional bool resistido_usa_bba = 9;
  // Para pericias derivadas,
  // fintar -> blefar vs sentir motivacao + BBA
  // rastrear -> sobrevivencia
  optional string derivada_de = 10;
}

// Talentos.
message PreRequisitoTalento {
  repeated string talentos = 1;
  message Atributos {
    optional int32 forca = 1;
    optional int32 destreza = 2;
    optional int32 consituicao = 3;
    optional int32 inteligencia = 4;
    optional int32 sabedoria = 5;
    optional int32 carisma = 6;
  }
  optional Atributos atributos = 2;
  optional InfoClasse nivel = 3;
  optional int32 bba = 4;
  repeated InfoPericia pericias = 5;
}

enum TipoComplementoTalento {
  // Talento nao requer complemento.
  TCT_NENHUM = 0;
  // O talento requer uma arma qualquer como complemento.
  TCT_ARMA = 1;
  // Talento requer uma arma exotica.
  TCT_ARMA_EXOTICA = 2;
  // Talento requer uma arma comum.
  TCT_ARMA_COMUM = 3;
  // Talento requer escola de magia.
  TCT_ESCOLA_MAGIA = 4;
  // Talento requer uma pericia.
  TCT_PERICIA = 5;
  // Talento que requer uma arma simples (para plebeus).
  TCT_ARMA_SIMPLES = 6;
}

message TalentoProto {
  // Chave do talento na tabela.
  optional string id = 1;
  // Nome do talento.
  optional string nome = 2;
  optional string nome_ingles = 16; 
  optional string link = 17;

  optional TipoComplementoTalento tipo_complemento = 3;
  optional string complemento = 4;
  optional string descricao = 5;
  optional PreRequisitoTalento pre_requisitos = 6;
  // Talentos de monstro.
  optional bool monstro = 7;

  // Para talentos que afetam pericias.
  message BonusPericia {
    optional string id = 1;
    optional int32 valor = 2;
  }
  repeated BonusPericia bonus_pericias = 8;

  // Bonus de testes de resistencia (salvacao).
  message BonusSalvacao {
    optional TipoSalvacao tipo = 1;
    optional Bonus bonus = 2;
  }
  repeated BonusSalvacao bonus_salvacao = 9;

  optional Bonus bonus_ca = 10;

  // Talento da bonus de pontos de vida.
  optional Bonus bonus_pontos_vida = 21;

  // Indica talento regional (FR).
  optional bool regional = 11;

  // De onde veio o talento.
  optional string livro = 12;

  // Indica de onde veio o talento (ranger, monge, guerreiro, humano etc).
  optional string origem = 13;

  optional bool usado_na_rodada = 14;

  // Indica que nao pode ser escolhido por jogador.
  // Ou ganha por classe, ou nao tem.
  optional bool nao_pode_ser_escolhido = 15;

  // Talento pode ser escolhido por guerreiro como bonus.
  optional bool guerreiro  = 18;

  // Talento pode ser adquirido pela classe no nivel passado.
  optional int32 ranger = 19;
  optional int32 monge = 20;
}

message HabilidadeEspecialProto {
  // Chave da habilidade.
  optional string id = 1;
  // Nome da habilidade.
  optional string nome = 2;
  optional string descricao = 5;
}

enum TipoItem {
  TIPO_ANEL = 0;
  TIPO_MANTO = 1;
  TIPO_LUVAS = 2;
  TIPO_BRACADEIRAS = 3;
  TIPO_POCAO = 4;
  TIPO_AMULETO = 5;
  TIPO_BOTAS = 6;
  TIPO_CHAPEU = 7;
  TIPO_PERGAMINHO_ARCANO = 8;
  TIPO_PERGAMINHO_DIVINO = 9;
  TIPO_ITEM_MUNDANO = 10;
  TIPO_VARINHA = 11;
}

enum TipoComplementoItemMagico {
  TCIM_NENHUM = 0;
  TCIM_ENERGIA = 1;  // resistencia a elementos.
}

// Ao criar entidade, se estiver desgastada, aqui indica a chance de ter usado um item.
enum NivelUso {
  NU_NENHUM = 0;
  NU_BASICO = 1;  // normalmente usa bem antes da batalha, horas/nivel.
  NU_BATALHA = 2; // normalmente usa logo antes da batalha, rodadas/nivel.
  NU_USAR_SE_FERIDO = 3;  // Usa se pontos de vida estiver baixo (75-50%).
  NU_USAR_SE_MUITO_FERIDO = 4; // Usa se estiver abaixo de 50%.
}

// Municoes em geral.
message Municao {
  optional string id = 1;
  optional string nome = 2;
  optional int32 quantidade = 3;
  optional Moedas custo = 4;
  repeated uint32 ids_efeitos = 5;
  optional bool em_uso = 6;
}

// Vale para anel, pocao etc.
message ItemMagicoProto {
  // Chave do item na tabela.
  optional string id = 1;
  // Para gerar link.
  optional string id_feitico = 23;
  // O tipo do item, para buscar na tabela (usando id tipo).
  optional TipoItem tipo = 17;
  // Nome legivel.
  optional string nome = 2;
  // Tipo do efeito do item (se causar algum).
  // Pode haver multiplos efeitos, a combinacao eh dada pelo campo combinacao_efeitos.
  repeated TipoEfeito tipo_efeito = 3;
  // A origem de cada efeito, para efeitos cumulativos. Mesma cardinalidade do tipo_efeito.
  // Na pratica, so sera necessario quando efeito for cumulativo. É preenchido com id do item em tabelas.cpp
  // quando nao houver.
  repeated string origens = 19;
  // Duracao do efeito.
  optional int32 duracao_rodadas = 4;
  // Custo em PO.
  optional int32 custo_po = 5;
  // custo generico.
  optional Moedas custo = 26;
  // Para efeitos que usam complemento.
  repeated int32 complementos = 6;
  // Se presente, gerara complementos a partir de uma rolagem. Exemplo: 1d8+3.
  repeated string complementos_variavel = 24;
  // Para efeitos que usam complemento de string (como pericia).
  repeated string complementos_str = 12;
  // Para efeitos de cura.
  optional string delta_pontos_vida = 7;
  optional CombinacaoEfeitos combinacao_efeitos = 8;
  // Se presente, alterara a descricao do efeito no personagem.
  optional string descricao = 9;
  // Para itens ativados por uso.
  optional bool em_uso = 10;
  // Ao usar, item gera este efeito. Util para finalizar o efeito.
  repeated uint32 ids_efeitos = 11;
  // cargas.
  // Indica que o item funciona a base de cargas.
  optional bool a_base_de_cargas = 13;
  // Indica que o item eh recarregavel.
  optional bool recarregavel = 14;
  // Maximo de cargas do item.
  optional int32 max_cargas = 15;
  // Cargas correntes do item.
  optional int32 cargas = 16;
  optional int32 usos_por_carga = 27;
  // Tipo de complemento requerido pelo item magico. Usado pela UI.
  optional TipoComplementoItemMagico tipo_complemento = 18;
  // Para itens com nivel e modificador.
  optional int32 nivel_conjurador = 21;
  optional int32 modificador_atributo = 22;
  optional NivelUso nivel_uso = 25;
}

// Alguns estados são mantidos nesta variável.
message ParametrosDesenho {
  // Identificador da proxima luz dinamica usada. A luz zero é usado para iluminação ambiente direcional.
  optional int32 luz_corrente = 1 [default=1];
  // OpenGL permite até 8 luzes simultaneas.
  optional int32 max_num_luzes = 2 [default=8];
  // Usado para fazer sliding: a gente cria um plano na altura do click inicial para fazer o movimento
  // paralelo ao plano XY.
  optional float offset_terreno = 3 [default=0];
  // Coordenadas de picking. A presenca de qualquer um destes campos indica picking.
  optional int32 picking_x = 28;
  optional int32 picking_y = 29;
  // Verdadeiro quando se esta desenhando a entidade selecionada.
  optional bool entidade_selecionada = 4 [default=false];
  // Verdadeiro quando se quer desenhar as luzes.
  optional bool iluminacao = 5 [default=true];
  // Verdadeiro quando se quer desenhar as entidades e as formas.
  optional bool desenha_entidades = 6 [default=true];
  optional bool desenha_terreno = 47 [default=true];
  // Uteis para mapa oclusao que ignora transparencias e selecionaveis.
  optional bool nao_desenha_entidades_translucidas = 42 [default=false];
  optional bool nao_desenha_entidades_selecionaveis = 43 [default=false];
  optional bool nao_desenha_entidades_fixas = 44 [default=false];
  // Essas entidades normalmente sao decorativas, entao ha casos onde eh interessante nao desenha-las para
  // o picking funcionar atraves dela (exemplo, agua).
  optional bool nao_desenha_entidades_fixas_translucidas = 59 [default=false];

  optional bool desenha_apenas_entidades_colisivas = 48 [default=false];
  // Verdadeiro para desenhar texturas.
  optional bool desenha_texturas = 7 [default=true];
  // Desenha a grade do tabuleiro.
  optional bool desenha_grade = 8 [default=true];
  // Desenha a aura das entidades.
  optional bool desenha_aura = 9 [default=true];
  // Desenha o indicador de FPS.
  optional bool desenha_fps = 10 [default=false];
  // Operacao de limpeza eh cara, alguns modos nao precisam dela.
  optional bool limpa_fundo = 11 [default=true];
  // Usar transparencia. Caso contrario, as entidades translucidas serao desenhadas como solidas.
  optional bool usar_transparencias = 12 [default=true];
  // Desenhar sombras.
  optional bool desenha_sombras = 13 [default=true];
  optional bool desenha_mapa_sombras = 45 [default=false];  // quando verdadeiro, estara desenhando mapa de sombras.
  optional int32 desenha_mapa_oclusao = 46 [default=0];  // o valor indica qual face do mapa, de [0 a 5]. Ausencia significa nao eh pra desenhar nenhuma das faces.
  optional bool desenha_log_eventos = 58;
  // Modo de desenho.
  optional bool modo_mestre = 14 [default=true];
  // Alfa para translucidos.
  optional float alfa_translucidos = 15 [default=0.5];
  // Alguns efeitos usam escala e translacao pos transformacoes para desenharem. Sao aplicados na ordem que aparecem abaixo.
  optional Posicao escala_efeito = 50;
  optional Posicao rotacao_efeito = 51;  // nesse caso, o angulo esta no eixo.
  optional Posicao translacao_efeito = 52;
  // Caso verdadeiro, a textura sempre ficara de frente para a camera.
  optional bool texturas_sempre_de_frente = 16 [default=true];
  // Posicao do olho.
  optional Posicao pos_olho = 17;
  // Desenhar acoes de jogadores.
  optional bool desenha_acoes = 18 [default=true];
  // Se verdadeiro, desenha a lista de pontos de vida.
  optional bool desenha_lista_pontos_vida = 20 [default=true];
  // Se verdadeiro, desenha o quadrado de selecao.
  optional bool desenha_quadrado_selecao = 21 [default=true];
  // Se verdadeiro, desenha o rastro de movimento das unidades ao se moverem.
  optional bool desenha_rastro_movimento = 22 [default=false];
  // Se verdadeiro, as texturas serao viradas sempre para cima.
  optional bool desenha_texturas_para_cima = 23 [default=false];
  // Se verdadeiro, desenha a forma selecionada.
  optional bool desenha_forma_selecionada = 24 [default=true];
  // Se verdadeiro, desenha a rosa dos ventos.
  optional bool desenha_rosa_dos_ventos = 25 [default=true];
  // Se verdadeiro, desenha os pontos de rolagem do tabuleiro.
  optional bool desenha_pontos_rolagem = 26 [default=true];
  // Se verdadeiro, aplica efeito de nevoa.
  optional bool desenha_nevoa = 27 [default=true];
  // Informacoes sobre a nevoa, se houver.
  optional Nevoa nevoa = 70;
  // Se verdadeiro, desenha o controle virtual de acoes.
  optional bool desenha_controle_virtual = 31 [default=true];
  // Se false, os detalhes nao serao desenhados.
  optional bool desenha_detalhes = 33 [default=true];
  // Se false, nao desenha as informacoes gerais (coordenadas, id acao etc).
  optional bool desenha_info_geral = 37 [default=true];
  // Tipo de visao da entidade presa.
  optional TipoVisao tipo_visao = 39;
  optional float multiplicador_visao_penumbra = 40 [default=1.2];
  optional bool iniciativa_corrente = 57;

  // Opcoes por entidade.
  // Se verdadeiro, desenha a barra de vida da entidade.
  optional bool desenha_barra_vida = 19 [default=false];
  // Se verdadeiro, desenha o rotulo da entidade.
  optional bool desenha_rotulo = 32 [default=false];
  // Se verdadeiro, desenha o rotulo especial da entidade.
  optional bool desenha_rotulo_especial = 34 [default=false];
  // Desenha sinalizacao de eventos.
  optional bool desenha_eventos_entidades = 35 [default=true];
  // Efeitos das entidades.
  optional bool desenha_efeitos_entidades = 36 [default=true];
  // Se verdadeiro, desenha a lista de objetos (depuracao).
  optional bool desenha_lista_objetos = 38 [default=false];
  // Se verdadeiro, desenha a lista de jogadores.
  optional bool desenha_lista_jogadores = 41 [default=false];
  // Configuracao de projecao de camera.
  optional Projecao projecao = 49;
  // Se verdadeiro, as entidades regerarao os VBOs ao atualizarem.
  optional bool regera_vbo = 53;
  // se verdadeiro, desenha a lista de iniciativas.
  optional bool desenha_iniciativas = 54 [default=true];
  // Se verdadeiro, ordenara as entidades apos a funcao ConfiguraOlhar.
  optional bool ordena_entidades_apos_configura_olhar = 55 [default=false];

  // Valor indica qual face esta sendo desenhada. Ausencia indica para nao desenhar.
  optional int32 desenha_mapa_luzes = 56;

  // Se verdadeiro, desenhara a ligacao de agarrar das entidades.
  optional bool desenha_ligacao_agarrar = 60 [default=true];

  // Se presente, apenas a entidade devera ser desenhada e nada mais, de forma decomposta.
  optional uint32 desenha_objeto_desmembrado = 61;

  // Se verdadeiro, mostra entidades invisiveis por causa de invisibilidade.
  optional bool observador_ve_invisivel = 62;

  // Se presente, indica que esta é a entidade que contem a luz.
  optional uint32 entidade_referencia_luz = 63;
  // Ignorar entidades com o id passado.
  repeated uint32 nao_desenhar_entidades = 64;
}

enum TipoVeneno {
  TV_CONTATO = 1;
  TV_INGESTAO = 2;
  TV_FERIMENTO = 3;
  TV_INALACAO = 4;
}

enum TipoDanoVeneno {
  TDV_NENHUM = 1;
  TDV_PONTOS_VIDA = 2;
  TDV_FORCA = 3;
  TDV_DESTREZA = 4;
  TDV_CONSTITUICAO = 5;
  TDV_INTELIGENCIA = 6;
  TDV_SABEDORIA = 7;
  TDV_CARISMA = 8;
  TDV_INCONSCIENCIA = 9;
}

message VenenoProto {
  optional string id = 1;
  optional string nome = 2;
  optional TipoVeneno tipo = 3;
  // A cardinalidade eh a mesma para cada par. Alguns venenos tem mais de um tipo de dano.
  repeated string dano_inicial = 4;
  repeated TipoDanoVeneno tipo_dano = 5;
  optional bool dano_primario_permanente = 6;
  repeated string dano_secundario = 7;
  repeated TipoDanoVeneno tipo_dano_secundario = 8;
  optional bool dano_secundario_permanente = 9;
  // Classe de dificuldade.
  optional int32 cd = 10;
  optional int32 preco_po = 11;
  // Indica pra nao computar CD usando a formula 10 + 1/2 HD + mod CON.
  optional bool nao_usar_cd_dinamico = 12;
  // Se verdadeiro, efeito primario ja foi aplicado.
  optional bool primario_aplicado = 13;
  // O atributo usado para calcular a CD.
  optional TipoAtributo atributo_para_cd = 14 [default=TA_CONSTITUICAO];
  // Para gases de sono (que ignoram imunidade a sono).
  optional bool sono = 15;
}

message DoencaProto {
  optional string id = 1;
  optional string nome = 2;
  optional TipoVeneno tipo = 3;
  optional string incubacao_dias = 4;
  repeated string dano = 5;
  repeated TipoDanoVeneno tipo_dano = 6;
  optional bool dano_permanente = 7;
  // Classe de dificuldade.
  optional int32 cd = 8;
  optional bool primario_aplicado = 9;
  optional bool nao_recupera_com_duas_salvacoes = 10;  // mummy rot
  optional bool passou_incubacao = 11;
}

// Os templates de D&D.
message ModeloDnD {
  optional TipoEfeitoModelo id_efeito = 1;     // Se o evento for reconhecido como algum efeito, o id estara aqui. (ver EFEITO_*).
  optional bool ativo = 2;                     // Indica modelo ativo, para os que sao desligaveis.
  repeated int32 complementos = 3;             // variaveis do modelo.
}

enum TipoDuracao {
  TD_RODADAS_NIVEL = 0;
  TD_MINUTOS_NIVEL = 1;
  TD_HORAS_NIVEL   = 2;
  TD_2_HORAS_NIVEL = 3;
  TD_10_MINUTOS_NIVEL = 4;
  TD_OUTRA_DURACAO = 20;
}

enum TipoModificadorAtaque {
  // Usa BBA + modificador do atributo de conjurador.
  TMA_BBA_MAIS_ATRIBUTO_CONJURACAO = 0;
  TMA_BBA_NIVEL_CONJURADOR         = 1;
  TMA_OUTROS                       = 100;
}

enum TipoModificadorSalvacao {
  // Padrao para feiticos.
  TMS_MODIFICADOR_CONJURACAO = 0;
  // Nao modifica pelo atributo.
  TMS_NENHUM = 1;
}
