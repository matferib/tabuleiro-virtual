package ent;
option java_package = "com.matferib.Tabuleiro.ent";

enum TendenciaSimplificada {
  TD_LEAL_BOM = 0;
  TD_LEAL_NEUTRO = 1;
  TD_LEAL_MAU = 2;
  TD_NEUTRO_BOM = 3;
  TD_NEUTRO = 4;
  TD_NEUTRO_MAU = 5;
  TD_CAOTICO_BOM = 6;
  TD_CAOTICO_NEUTRO = 7;
  TD_CAOTICO_MAU = 8;
}

enum TamanhoEntidade {
  TM_MINUSCULO = 0;
  TM_DIMINUTO = 1;
  TM_MIUDO = 2;
  TM_PEQUENO = 3;
  TM_MEDIO = 4;
  TM_GRANDE = 5;
  TM_ENORME = 6;
  TM_IMENSO = 7;
  TM_COLOSSAL = 8;
}

// Os efeitos sao tabelados. Na tabela, existe uma tabela de efeito que define o que cada um faz.
// Outros sao hardcoded.
enum TipoEfeito {
  EFEITO_INVALIDO = -1;
  EFEITO_OUTRO = 0;     // evento sem efeito conhecido.
  EFEITO_REFLEXOS = 1;  // complemento: numero de imagens.
  EFEITO_PISCAR = 2;
  EFEITO_BORRAR = 3;
  EFEITO_FORCA_TOURO = 4;
  EFEITO_AGILIDADE_GATO = 5;
  EFEITO_ACELERAR = 6;
  EFEITO_AUMENTAR_PESSOA = 7;
  EFEITO_REDUZIR_PESSOA = 8;
  EFEITO_ARMADURA = 9;
  EFEITO_ESCUDO_FE       = 10;
  EFEITO_SABEDORIA_CORUJA = 11;
  EFEITO_ASTUCIA_RAPOSA = 12;
  EFEITO_ESPLENDOR_AGUIA = 13;
  EFEITO_VIGOR_URSO = 14;
  EFEITO_ROUPA_ENCANTADA = 15;
  EFEITO_ESCUDO_ENCANTADO = 16;
  EFEITO_HEROISMO = 17;
  EFEITO_PELE_ARVORE = 18;
  EFEITO_PROTECAO_CONTRA_MAL = 19;
  EFEITO_PROTECAO_CONTRA_BEM = 20;
  EFEITO_PROTECAO_CONTRA_CAOS = 21;
  EFEITO_PROTECAO_CONTRA_ORDEM = 22;
  EFEITO_FURIA = 23;
  // A furia do barbaro tem alguns efeitos a mais, como fadiga apos efeito e bonus de vontade contra encantamento.
  EFEITO_FURIA_BARBARO = 24;
  EFEITO_FADIGA = 25;
  // fim furia.
  EFEITO_INVISIBILIDADE = 26;
  EFEITO_AJUDA = 27;
  EFEITO_SUPORTAR_ELEMENTOS = 28;     // TODO
  EFEITO_RESISTENCIA_ELEMENTOS = 29;  // TODO
  EFEITO_SANTUARIO = 30;              // TODO
  // Complemento é o rotulo.
  EFEITO_ABENCOAR_ARMA = 31;

  EFEITO_PEDRA_ENCANTADA = 32;
  EFEITO_DEFLEXAO_CA = 33;
  EFEITO_RESISTENCIA_SALVACAO = 34;
  EFEITO_COMPETENCIA_PERICIA = 35;
  EFEITO_MELHORIA_FORCA = 36;
  EFEITO_MELHORIA_DESTREZA = 37;
  // Indica que entidade esta envenenada.
  EFEITO_VENENO = 38;
  // Dano de atributo por causa de veneno.
  // Os complementos indicam quanto de dano em cada atributo: for, des, con, int, sab, car, nesta ordem.
  EFEITO_DANO_ATRIBUTO_VENENO = 39;
  // O complemento é da forma: rotulo, alinhamento.
  EFEITO_ALINHAR_ARMA = 40;
}

// Tipo de visao para entidades e camera.
enum TipoVisao {
  VISAO_NORMAL = 0;
  VISAO_BAIXA_LUMINOSIDADE = 1;
  VISAO_ESCURO = 2;
}

enum TipoAtributo {
  TA_FORCA = 0;
  TA_DESTREZA = 1;
  TA_CONSTITUICAO = 2;
  TA_INTELIGENCIA = 3;
  TA_SABEDORIA = 4;
  TA_CARISMA = 5;
}

enum TipoSalvacao {
  TS_FORTITUDE = 0;
  TS_REFLEXO = 1;
  TS_VONTADE = 2;
}

enum ResultadoSalvacao {
  RS_FALHOU = 0;
  RS_MEIO = 1;
  RS_QUARTO = 2;
  RS_ANULOU = 3;
}

enum TipoDnD {
  TIPO_HUMANOIDE = 0;
  TIPO_MORTO_VIVO = 1;
  TIPO_GOBLINOIDE = 2;
  TIPO_ANIMAL = 3;
  TIPO_PLANTA = 4;
  TIPO_BESTA_MAGICA = 5; // d10 fortitude, reflexo, bba guerreiro, visao escuro 12q, visao na penumbra.
  // TODO outros.
}

enum DescritorAtaque {
  // descritores de magia.
  DESC_NENHUM = 0;
  DESC_ACIDO = 1;
  DESC_AR = 2;
  DESC_CAOS = 3;
  DESC_FRIO = 4;
  DESC_ESCURIDAO = 5;
  DESC_MORTE = 6;
  DESC_TERRA = 7;
  DESC_ELETRICIDADE = 8;
  DESC_MAL = 9;
  DESC_MEDO = 10;
  DESC_FOGO = 11;
  DESC_FORCA = 12;
  DESC_BEM = 13;
  DESC_LEAL = 14;
  DESC_LUZ = 15;
  DESC_MENTAL = 16;
  DESC_SONICO = 17;
  DESC_AGUA = 18;
  DESC_VENENO = 19;
  DESC_DEPENDENTE_IDIOMA = 20;
  // Outras formas de ataque, nao necessariamente descritores mas funcionam como se fosse.
  DESC_FERRO_FRIO = 21;
  DESC_MADEIRA_NEGRA = 22;
  DESC_MITRAL = 23;
  DESC_ADAMANTE = 24;
  DESC_PRATA_ALQUIMICA = 25;
  DESC_COURO_DRAGAO = 26;
  // tipo de ataque fisico.
  DESC_PERFURANTE = 27;
  DESC_CORTANTE = 28;
  DESC_ESTOURANTE = 29;
}

// Tambem usado como vetor.
message Posicao {
  optional float x = 3;
  optional float y = 4;
  optional float z = 5;
  optional int32 id_cenario = 6 [default=-1];
}

message Cor {
  optional float r = 1 [default=0.0];
  optional float g = 2 [default=0.0];
  optional float b = 3 [default=0.0];
  optional float a = 4 [default=1.0];
}

message IluminacaoPontual {
  optional Cor cor = 1;
  // Metros. Passar para quadrados.
  optional float raio_m = 2;
  optional float atenuacao = 3 [deprecated=true];
}

message Nevoa {
  optional float minimo = 1;
  optional float maximo = 2;
  optional Posicao referencia = 3;  // coordenadas da camera.
  optional Cor cor = 4;
}

message InfoTextura {
  // Identificador da textura. Normalmente o nome do arquivo. Para mapeamento de cubo, sera adicionado
  // pos{xyz} e neg{xyz} apos o nome.
  optional string id = 1;
  // Os valores sao relativos a 1.0. 1.0 x 1.0 eh quadrado.
  optional float largura = 13 [default = 1.0];
  optional float altura = 14 [default = 1.0];
  // Se presente, realiza translacao das coordenadas de textura apos a escala.
  optional float translacao_x = 15 [default = 0.0];
  optional float translacao_y = 16 [default = 0.0];
  // Para texturas de mapeamento de cubo.
  optional bool textura_cubo = 2;
  // Os bits da texturas lidos de forma crua do arquivo, ainda nao processado. Util para enviar texturas ou armazenar texturas locais
  // dentro de tabuleiros.
  optional bytes bits_crus = 6;
  optional bytes bits_crus_direita = 7;
  optional bytes bits_crus_frente = 8;
  optional bytes bits_crus_cima = 9;
  optional bytes bits_crus_esquerda = 10;
  optional bytes bits_crus_atras = 11;
  optional bytes bits_crus_baixo = 12;
  // Um dos valores GL_REPEAT, GL_MIRRERED_REPEAT, GL_CLAMP_TO_EDGE, GL_CLAMP_TO_BORDER.
  optional int32 modo_textura = 17;
}

// A escala nos tres eixos.
message Escala {
  optional float x = 1 [default=1.0];
  optional float y = 2 [default=1.0];
  optional float z = 3 [default=1.0];
}

message Modelo3d {
  // Identificador do modelo 3d.
  optional string id = 1;
  // Para transmissao. Bits do arquivo de modelo.
  optional bytes bits_crus = 6;
  // Translacao do modelo 3d.
  optional Posicao translacao = 7;
  // Escala aplicada, apos translacao.
  optional Escala escala = 8;
}

message Projecao {
  optional int32 tipo_camera = 1;
  optional float plano_corte_proximo_m = 2;
  optional float plano_corte_distante_m = 3;
  optional float campo_visao_vertical_graus = 4;
  optional float razao_aspecto = 5;
  optional float largura_m = 6;
  optional float altura_m = 7;
}

// Os atributos basicos.
message Atributos {
  optional Bonus forca = 1;
  optional Bonus destreza = 2;
  optional Bonus constituicao = 3;
  optional Bonus inteligencia = 4;
  optional Bonus sabedoria = 5;
  optional Bonus carisma = 6;
}

enum TipoCombinacao {
  COMB_E = 0;  // todos descritores sao requeridos
  COMB_OU = 1; // um dos descritores é requerido.
}

// Reducoes de dano de acordo com descritores.
message ReducaoDano {
  repeated DescritorAtaque descritores = 1;
  optional int32 valor = 2;
  optional TipoCombinacao tipo_combinacao = 3;
}

// Esse tipo de resistencia é por rodada.
message ResistenciaElementos {
  optional DescritorAtaque descritor = 1;
  optional int32 valor = 2;
  // Quanto ja recebeu de dano do tipo na rodada. Como podem haver multiplas do mesmo tipo onde so a melhor se aplica,
  // todas do mesmo tipo terao o mesmo valor.
  optional int32 contador_rodada = 3;
}

// Dados de defesa global (independe de ataque).
message DadosDefesa {
  optional string tipo_defesa = 1 [deprecated=true];
  optional bool imune_critico = 3;
  optional int32 ca_deprecated = 2 [deprecated=true];
  optional Bonus ca = 4;
  optional Bonus salvacao_fortitude = 5;
  optional Bonus salvacao_reflexo = 6;
  optional Bonus salvacao_vontade = 7;
  // TODO outras salvacoes.
  // Nao eh bom colocar as coisas de CA aqui fora porque nas formas alternativas eh feito merge do bonus.
  optional string id_armadura = 8;
  optional string id_escudo = 9;
  optional bool armadura_obra_prima = 10;
  optional bool escudo_obra_prima = 11;
  optional int32 bonus_magico_armadura = 12;
  optional int32 bonus_magico_escudo = 13;
  // Aplicar esquiva contra essa entidade.
  optional uint32 entidade_esquiva = 14;
  // A reducao de dano do barbaro eh mais simples de ser feita, porque independe de tipo de ataque.
  optional int32 reducao_dano_barbaro = 15;
  optional int32 resistencia_magia = 16;
  repeated DescritorAtaque imunidades = 17;
  // Reduz ataques que nao corresponderem aos descritores.
  optional ReducaoDano reducao_dano = 18;
  // Para efeitos elementais: reduz tipos especificos de dano de acordo com descritor do ataque.
  repeated ResistenciaElementos resistencia_elementos = 19;
}

// Se mudar aqui, mudar na UI tb que converte o tipo para indice (TipoParaIndice).
enum TipoBonus {
  TB_ALQUIMICO = 0;
  TB_ARMADURA = 1;
  TB_ARMADURA_MELHORIA = 2;
  TB_ARMADURA_NATURAL = 3;
  TB_ATRIBUTO = 4;
  TB_BASE = 5;
  TB_CIRCUNSTANCIA = 6;
  TB_CLASSE = 7;
  TB_COMPETENCIA = 8;
  TB_DEFLEXAO = 9;
  TB_ESCUDO = 10;
  TB_ESCUDO_MELHORIA = 11;
  TB_ESQUIVA = 12;
  TB_FAMILIAR = 13;
  TB_INERENTE = 14;
  TB_INTUICAO = 15;
  TB_MELHORIA = 16;
  TB_MORAL = 17;
  // cumulativo para poder ter valores negativos.
  TB_NIVEIS_NEGATIVOS = 18;
  // Bonus de atributos ganhados a cada 4 niveis.
  TB_NIVEL = 19;
  TB_PROFANO = 20;
  // cumulativo para aceitar valores negativos.
  TB_RACIAL = 21;
  TB_TEMPLATE = 22;
  TB_RESISTENCIA = 23;
  TB_SAGRADO = 24;
  TB_SINERGIA = 25;
  TB_SORTE = 26;
  TB_TALENTO = 27;
  TB_TAMANHO = 28;
  // Cumulativo.
  TB_SEM_NOME = 29;
  TB_ARMADURA_NATURAL_MELHORIA = 30;
}


// Um tipo de bonus.
message BonusIndividual {
  optional TipoBonus tipo = 1;
  message PorOrigem {
    optional int32 valor = 1;
    optional string origem = 2;
    // Para preenchimento do valor atraves de complemento.
    optional int32 indice_complemento = 3;
    // Para associar com eventos.
    optional uint32 id_unico = 4;
  }
  repeated PorOrigem por_origem = 2;
}

// Diferentes tipos de bonus.
message Bonus {
  repeated BonusIndividual bonus_individual = 1;
}

enum ProgressaoBba {
  PBBA_ZERO = 0;
  PBBA_MEIO = 1;
  PBBA_TRES_QUARTOS = 2;
  PBBA_UM = 3;
}

enum ProgressaoConjurador {
  PCONJ_ZERO = 0;
  PCONJ_UM = 1;  // mais comum.
  PCONJ_MEIO_MIN_4 = 2; // ranger, paladino
}

// Informacoes sobre a classe de um personagem.
// ATENCAO: se adicionar qualquer campo repeated aqui, deve-se conferir a funcao RecomputaDependenciasClasses
// que faz merge com o tabelado.
message InfoClasse {
  optional string id = 1;
  optional string nome = 9;
  optional int32 nivel = 2;
  optional int32 nivel_conjurador = 3;
  // Bonus base de ataque do nivel.
  optional int32 bba = 4;
  optional ProgressaoBba progressao_bba = 8;
  // Exemplo: modificador de sabedoria para clerigos.
  optional int32 modificador_atributo_conjuracao = 5;
  // Qual o atributo de conjuracao da classe.
  optional TipoAtributo atributo_conjuracao = 6;
  // Quais salvacoes sao fortes para a classe.
  repeated TipoSalvacao salvacoes_fortes = 7;
  // Como o nivel de conjurador progride.
  optional ProgressaoConjurador progressao_conjurador = 10;
  // Lista das pericias de classe. Caso seja o id de uma classe, herdara dela.
  repeated string pericias = 11;
  // Essas nao vem da tabela de classe, mas sim do modelo do monstro. Ver gaviao-seta como exemplo.
  // Atencao: esta aqui nao eh limpa no merge, portanto NUNCA deve aparecer na tabela de classes.
  repeated string pericias_monstro = 20;
  // Qual o tipo de magia para o classe. Exemplo: feiticeiro usa magia de mago. Caso ausente, usara de id.
  optional string id_para_magia = 12;
  // Para monstros, que conjuram feiticos como classes. Exemplo: phaerimm usa feiticeiro.
  optional string id_para_progressao_de_magia = 18;
  optional bool possui_dominio = 14;
  optional bool precisa_memorizar = 17;
  // Representa os slots para cada nivel de magia. Por exemplo, slots[0] eh o numero de slots de nivel zero para o nivel.
  message ProgressaoParaNivel {
    optional string magias_por_dia = 2;  // Para facilitar a tabela. Comeca sempre do nivel 0.
    optional string conhecidos = 3;      // Comeca sempre do nivel 0.
  }
  // A progressao apresenta os slots para cada nivel da classe. Por exemplo, slots_para_nivel[1] representa os slots para
  // nivel 1 da classe. O indice zero sempre eh vazio.
  message ProgressaoFeitico {
    repeated ProgressaoParaNivel para_nivel = 1;
  }
  optional ProgressaoFeitico progressao_feitico = 16;
  message HabilidadesEspeciaisPorNivel {
    // Chave da habilidade especial na tabela de chaves.
    optional string id = 1;
    // Em qual nivel se ganha.
    optional int32 nivel = 2;
  }
  repeated HabilidadesEspeciaisPorNivel habilidades_por_nivel = 19;
}

// Informacao sobre a pericia do personagem.
// Cada pericia tem a chave e os pontos gastos e um indicador se eh de classe ou nao.
message InfoPericia {
  optional string id = 1;
  optional int32 pontos = 2;
  // Complemento da pericia.
  optional string complemento = 4;
  // Valor final da pericia.
  optional Bonus bonus = 5;
  // As restricoes de sinergia da pericia.
  repeated string restricoes_sinergia = 6;
  // Monstros podem adicionar pericias_monstro em info_classes para considerar a pericia de classe.
}

message ConsequenciaEvento {
  // Afeta todos atributos.
  optional Atributos atributos = 1;
  // Afeta os dados de defesa: ca e salvacoes.
  optional DadosDefesa dados_defesa = 2;
  // Afeta o bonus das jogadas de ataque.
  optional Bonus jogada_ataque = 3;
  // Alteracao no tamanho da entidade.
  optional Bonus tamanho = 4;
  // Alteracao na pericia.
  optional InfoPericia dados_pericia = 5;

  // se verdadeiro, usara complemento ao inves do valor passado.
  optional bool usa_complemento = 10;
}

message EfeitoProto {
  optional TipoEfeito id = 1;  // id do efeito.
  // Apenas um efeito desse sera computado por vez. Por exemplo, acelerar. Outros efeitos podem ser acumulados,
  // mas seus bonus nao se acumularam. O caso de acelerar eh explicito na regra que nao acumula (ate pq o bonus e de esquiva,
  // que se acumula).
  optional bool nao_cumulativo = 4;
  // O que ocorre com a entidade quando efeito comeca.
  optional ConsequenciaEvento consequencia = 2;
  // O que ocorre quando o efeito termina.
  optional ConsequenciaEvento consequencia_fim = 3;
}

// Como os efeitos de uma pocao se combinam.
enum CombinacaoEfeitos {
  // Os efeitos se combinam.
  COMB_MULTIPLOS = 0;
  // Os efeitos sao exclusivos (um ou outro).
  COMB_EXCLUSIVO = 1;
}

// Pericias.
message PericiaProto {
  optional string id = 1;
  optional string nome = 2;
  optional bool sem_treinamento = 3;
  optional TipoAtributo atributo = 4;
  optional bool penalidade_armadura = 5;
  optional string complemento = 6;
  message InfoSinergia {
    optional string id = 1;
    // Uma string descrevendo a restricao. Ausente se nao houver.
    optional string restricao = 2;
  }
  repeated InfoSinergia sinergias = 7;
}

// Talentos.
message PreRequisitoTalento {
}

enum TipoComplementoTalento {
  // Talento nao requer complemento.
  TCT_NENHUM = 0;
  // O talento requer uma arma qualquer como complemento.
  TCT_ARMA = 1;
  // Talento requer uma arma exotica.
  TCT_ARMA_EXOTICA = 2;
  // Talento requer uma arma comum.
  TCT_ARMA_COMUM = 3;
  // Talento requer escola de magia.
  TCT_ESCOLA_MAGIA = 4;
  // Talento requer uma pericia.
  TCT_PERICIA = 5;
}

message TalentoProto {
  // Chave do talento na tabela.
  optional string id = 1;
  // Nome do talento.
  optional string nome = 2;

  optional TipoComplementoTalento tipo_complemento = 3;
  optional string complemento = 4;
  optional string descricao = 5;
  optional PreRequisitoTalento pre_requisito = 6;
  // Talentos de monstro.
  optional bool monstro = 7;

  // Para talentos que afetam pericias.
  message BonusPericia {
    optional string id = 1;
    optional int32 valor = 2;
  }
  repeated BonusPericia bonus_pericias = 8;
}

message HabilidadeEspecialProto {
  // Chave da habilidade.
  optional string id = 1;
  // Nome da habilidade.
  optional string nome = 2;
  optional string descricao = 5;
}

// Vale para anel, pocao etc.
message ItemMagicoProto {
  // Chave do item na tabela.
  optional string id = 1;
  // Nome legivel.
  optional string nome = 2;
  // Tipo do efeito do item (se causar algum).
  // Pode haver multiplos efeitos, a combinacao eh dada pelo campo combinacao_efeitos.
  repeated TipoEfeito tipo_efeito = 3;
  // Duracao do efeito.
  optional int32 duracao_rodadas = 4;
  // Custo em PO.
  optional int32 custo_po = 5;
  // Para efeitos que usam complemento.
  repeated int32 complementos = 6;
  // Para efeitos que usam complemento de string (como pericia).
  repeated string complementos_str = 12;
  // Para efeitos de cura.
  optional string delta_pontos_vida = 7;
  optional CombinacaoEfeitos combinacao_efeitos = 8;
  // Se presente, alterara a descricao do efeito no personagem.
  optional string descricao = 9;
  // Para itens ativados por uso.
  optional bool em_uso = 10;
  // Ao usar, item gera este efeito. Util para finalizar o efeito.
  repeated uint32 ids_efeitos = 11;
  // cargas.
  // Indica que o item funciona a base de cargas.
  optional bool a_base_de_cargas = 13;
  // Indica que o item eh recarregavel.
  optional bool recarregavel = 14;
  // Maximo de cargas do item.
  optional int32 max_cargas = 15;
  // Cargas correntes do item.
  optional int32 cargas = 16;
}

message AnelProto {
}

message MantoProto {
}

// Alguns estados são mantidos nesta variável.
message ParametrosDesenho {
  // Identificador da proxima luz dinamica usada. A luz zero é usado para iluminação ambiente direcional.
  optional int32 luz_corrente = 1 [default=1];
  // OpenGL permite até 8 luzes simultaneas.
  optional int32 max_num_luzes = 2 [default=8];
  // Usado para fazer sliding: a gente cria um plano na altura do click inicial para fazer o movimento
  // paralelo ao plano XY.
  optional float offset_terreno = 3 [default=0];
  // Coordenadas de picking. A presenca de qualquer um destes campos indica picking.
  optional int32 picking_x = 28;
  optional int32 picking_y = 29;
  // Verdadeiro quando se esta desenhando a entidade selecionada.
  optional bool entidade_selecionada = 4 [default=false];
  // Verdadeiro quando se quer desenhar as luzes.
  optional bool iluminacao = 5 [default=true];
  // Verdadeiro quando se quer desenhar as entidades e as formas.
  optional bool desenha_entidades = 6 [default=true];
  optional bool desenha_terreno = 47 [default=true];
  // Uteis para mapa oclusao que ignora transparencias e selecionaveis.
  optional bool nao_desenha_entidades_translucidas = 42 [default=false];
  optional bool nao_desenha_entidades_selecionaveis = 43 [default=false];
  optional bool nao_desenha_entidades_fixas = 44 [default=false];
  // Essas entidades normalmente sao decorativas, entao ha casos onde eh interessante nao desenha-las para
  // o picking funcionar atraves dela (exemplo, agua).
  optional bool nao_desenha_entidades_fixas_translucidas = 59 [default=false];

  optional bool desenha_apenas_entidades_colisivas = 48 [default=false];
  // Verdadeiro para desenhar texturas.
  optional bool desenha_texturas = 7 [default=true];
  // Desenha a grade do tabuleiro.
  optional bool desenha_grade = 8 [default=true];
  // Desenha a aura das entidades.
  optional bool desenha_aura = 9 [default=true];
  // Desenha o indicador de FPS.
  optional bool desenha_fps = 10 [default=false];
  // Operacao de limpeza eh cara, alguns modos nao precisam dela.
  optional bool limpa_fundo = 11 [default=true];
  // Usar transparencia. Caso contrario, as entidades translucidas serao desenhadas como solidas.
  optional bool usar_transparencias = 12 [default=true];
  // Desenhar sombras.
  optional bool desenha_sombras = 13 [default=true];
  optional bool desenha_mapa_sombras = 45 [default=false];  // quando verdadeiro, estara desenhando mapa de sombras.
  optional int32 desenha_mapa_oclusao = 46 [default=0];  // o valor indica qual face do mapa, de [0 a 5]. Ausencia significa nao eh pra desenhar nenhuma das faces.
  optional bool desenha_log_eventos = 58;
  // Modo de desenho.
  optional bool modo_mestre = 14 [default=true];
  // Alfa para translucidos.
  optional float alfa_translucidos = 15 [default=0.5];
  // Alguns efeitos usam escala e translacao pos transformacoes para desenharem. Sao aplicados na ordem que aparecem abaixo.
  optional Posicao escala_efeito = 50;
  optional Posicao rotacao_efeito = 51;  // nesse caso, o angulo esta no eixo.
  optional Posicao translacao_efeito = 52;
  // Caso verdadeiro, a textura sempre ficara de frente para a camera.
  optional bool texturas_sempre_de_frente = 16 [default=true];
  // Posicao do olho.
  optional Posicao pos_olho = 17;
  // Desenhar acoes de jogadores.
  optional bool desenha_acoes = 18 [default=true];
  // Se verdadeiro, desenha a lista de pontos de vida.
  optional bool desenha_lista_pontos_vida = 20 [default=true];
  // Se verdadeiro, desenha o quadrado de selecao.
  optional bool desenha_quadrado_selecao = 21 [default=true];
  // Se verdadeiro, desenha o rastro de movimento das unidades ao se moverem.
  optional bool desenha_rastro_movimento = 22 [default=false];
  // Se verdadeiro, as texturas serao viradas sempre para cima.
  optional bool desenha_texturas_para_cima = 23 [default=false];
  // Se verdadeiro, desenha a forma selecionada.
  optional bool desenha_forma_selecionada = 24 [default=true];
  // Se verdadeiro, desenha a rosa dos ventos.
  optional bool desenha_rosa_dos_ventos = 25 [default=true];
  // Se verdadeiro, desenha os pontos de rolagem do tabuleiro.
  optional bool desenha_pontos_rolagem = 26 [default=true];
  // Se verdadeiro, aplica efeito de nevoa.
  optional bool desenha_nevoa = 27 [default=true];
  // Informacoes sobre a nevoa, se houver.
  optional Nevoa nevoa = 70;
  // Se verdadeiro, desenha o controle virtual de acoes.
  optional bool desenha_controle_virtual = 31 [default=true];
  // Se false, os detalhes nao serao desenhados.
  optional bool desenha_detalhes = 33 [default=true];
  // Se false, nao desenha as informacoes gerais (coordenadas, id acao etc).
  optional bool desenha_info_geral = 37 [default=true];
  // Tipo de visao da entidade presa.
  optional TipoVisao tipo_visao = 39;
  optional float multiplicador_visao_penumbra = 40 [default=1.2];
  optional bool iniciativa_corrente = 57;

  // Opcoes por entidade.
  // Se verdadeiro, desenha a barra de vida da entidade.
  optional bool desenha_barra_vida = 19 [default=false];
  // Se verdadeiro, desenha o rotulo da entidade.
  optional bool desenha_rotulo = 32 [default=false];
  // Se verdadeiro, desenha o rotulo especial da entidade.
  optional bool desenha_rotulo_especial = 34 [default=false];
  // Desenha sinalizacao de eventos.
  optional bool desenha_eventos_entidades = 35 [default=true];
  // Efeitos das entidades.
  optional bool desenha_efeitos_entidades = 36 [default=true];
  // Se verdadeiro, desenha a lista de objetos (depuracao).
  optional bool desenha_lista_objetos = 38 [default=false];
  // Se verdadeiro, desenha a lista de jogadores.
  optional bool desenha_lista_jogadores = 41 [default=false];
  // Configuracao de projecao de camera.
  optional Projecao projecao = 49;
  // Se verdadeiro, as entidades regerarao os VBOs ao atualizarem.
  optional bool regera_vbo = 53;
  // se verdadeiro, desenha a lista de iniciativas.
  optional bool desenha_iniciativas = 54 [default=true];
  // Se verdadeiro, ordenara as entidades apos a funcao ConfiguraOlhar.
  optional bool ordena_entidades_apos_configura_olhar = 55 [default=false];

  // Valor indica qual face esta sendo desenhada. Ausencia indica para nao desenhar.
  optional int32 desenha_mapa_luzes = 56;

  // Se verdadeiro, desenhara a ligacao de agarrar das entidades.
  optional bool desenha_ligacao_agarrar = 60 [default=true];
}

enum TipoVeneno {
  TV_CONTATO = 1;
  TV_INGESTAO = 2;
  TV_FERIMENTO = 3;
  TV_INALACAO = 4;
}

enum TipoDanoVeneno {
  TDV_NENHUM = 1;
  TDV_PONTOS_VIDA = 2;
  TDV_FORCA = 3;
  TDV_DESTREZA = 4;
  TDV_CONSTITUICAO = 5;
  TDV_INTELIGENCIA = 6;
  TDV_SABEDORIA = 7;
  TDV_CARISMA = 8;
  TDV_INCONSCIENCIA = 9;
}

message VenenoProto {
  optional string id = 1;
  optional string nome = 2;
  optional TipoVeneno tipo = 3;
  // A cardinalidade eh a mesma para cada par. Alguns venenos tem mais de um tipo de dano.
  repeated string dano_inicial = 4;
  repeated TipoDanoVeneno tipo_dano = 5;
  optional bool dano_primario_permanente = 6;
  repeated string dano_secundario = 7;
  repeated TipoDanoVeneno tipo_dano_secundario = 8;
  optional bool dano_secundario_permanente = 9;
  // Classe de dificuldade.
  optional int32 cd = 10;
  optional int32 preco_po = 11;
}
